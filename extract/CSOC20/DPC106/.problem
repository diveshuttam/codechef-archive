{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "  <p>\n            Editors of an electronic magazine make draft versions of the documents in the \n            form of text files. However, publications should meet some requirements, in \n            particular, concerning the rules of reference use. Unfortunately, lots of the \n            draft articles violate some rules. It is desirable to develop a computer program \n            that will make a publication satisfy all the rules from a draft version.\n        </p>\n        <p>\n            Let&#39;s call a &quot;paragraph&quot; a set of lines in the article going one after another, \n            so that paragraphs are separated by at least one empty line (an &quot;empty line&quot; is \n            a line that containing no characters different from spaces). Any paragraph can \n            contain an arbitrary number of references. A reference is a positive integer not \n            greater than 999 enclosed in square brackets (for example: [23]). There will be \n            no spaces between the brackets and the number. The square brackets are not used \n            in any other context but reference.\n        </p>\n        <p>\n            There can be two types of paragraph - &quot;regular&quot; and &quot;reference description&quot;. \n            Reference description differs from the regular paragraph because it begins with \n            the reference it describes, for example:\n        </p>\n        <p>\n            <tt>[23] It is the description ...</tt>\n        </p>\n        <p>\n            The opening square bracket will be at the first position of the first line of \n            the &quot;reference description&quot; paragraph (i.e. there will be no spaces before it). \n            No reference description paragraph will contain references inside itself.\n        </p>\n        <p>\n            Each reference will have exactly one corresponding description and each \n            description will have at least one reference to it.\n        </p>\n        <p>\n            To convert a draft version to a publication you have to use the following rules.\n        </p>\n        <ul>\n            <li>References should be renumbered by the successive integer numbers starting from \n                one in the order of their first appearance in the regular paragraphs of the \n                source draft version of the document. </li>\n            <li>Reference descriptions should be placed at the end of the article ordered by \n                their number. </li>\n            <li>The order of &quot;regular&quot; paragraphs in the document should be preserved. </li>\n            <li>Your program should not make any other changes to the paragraphs. </li>\n        </ul>\n        <p>\n            <font face=\"Arial\" size=\"+1\"><b>Input</b></font>\n        </p>\n        <p>\n            The input file will be a text file containing a draft article your program \n            should process. All lines will be no more than 80 characters long. Any reference \n            description will contain no more than 3 lines. The input file will contain up to \n            40000 lines.\n        </p>\n        <p>\n            <font face=\"Arial\" size=\"+1\"><b>Output</b></font>\n        </p>\n        <p>\n            The output file contains the result of processing. All paragraphs should be \n            separated by one &quot;true&quot; empty line (i.e. a line that contains no characters at \n            all). There should be no empty lines before the first paragraph.\n        </p>\n        <p>\n            <font face=\"Arial\" size=\"+1\"><b>Sample input</b></font>\n        </p>\n        <pre><tt>\n[5] Brownell, D, &quot;Dynamic Reverse Address Resolution Protocol\n    (DRARP)&quot;, Work in Progress.\n\nThe Reverse Address Resolution Protocol (RARP) [10] (through the\nextensions defined in the Dynamic RARP (DRARP) [5]) explicitly\naddresses the problem of network address discovery, and includes an\nautomatic IP address assignment mechanism.\n\n[10] Finlayson, R., Mann, T., Mogul, J., and M. Theimer, &quot;A Reverse\n        Address Resolution Protocol&quot;, RFC 903, Stanford, June 1984.\n\n[16] Postel, J., &quot;Internet Control Message Protocol&quot;, STD 5, RFC 792,\n        USC/Information Sciences Institute, September 1981.\n\n\nThe Trivial File Transfer Protocol (TFTP) [20] provides for transport\nof a boot image from a boot server.  The Internet Control Message\nProtocol (ICMP) [16] provides for informing hosts of additional\nrouters\nvia &quot;ICMP redirect&quot; messages.\n\n[20] Sollins, K., &quot;The TFTP Protocol (Revision 2)&quot;,  RFC 783, NIC,\n     June 1981.\n\nWorks [10], [16] and [20] can be obtained via Internet.\n</tt></pre>\n        <p>\n            <font face=\"Arial\" size=\"+1\"><b>Output for the sample input</b></font>\n        </p>\n        <pre><tt>The Reverse Address Resolution Protocol (RARP) [1] (through the\nextensions defined in the Dynamic RARP (DRARP) [2]) explicitly\naddresses the problem of network address discovery, and includes an\nautomatic IP address assignment mechanism.\n\nThe Trivial File Transfer Protocol (TFTP) [3] provides for transport\nof a boot image from a boot server.  The Internet Control Message\nProtocol (ICMP) [4] provides for informing hosts of additional routers\nvia &quot;ICMP redirect&quot; messages.\n\nWorks [1], [4] and [3] can be obtained via Internet.\n\n[1] Finlayson, R., Mann, T., Mogul, J., and M. Theimer, &quot;A Reverse\n        Address Resolution Protocol&quot;, RFC 903, Stanford, June 1984.\n\n[2] Brownell, D, &quot;Dynamic Reverse Address Resolution Protocol\n    (DRARP)&quot;, Work in Progress.\n\n[3] Sollins, K., &quot;The TFTP Protocol (Revision 2)&quot;,  RFC 783, NIC,\n     June 1981.\n\n[4] Postel, J., &quot;Internet Control Message Protocol&quot;, STD 5, RFC 792,\n        USC/Information Sciences Institute, September 1981.\n</tt></pre>\n    \n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "25-02-2010",
    "is_direct_submittable": false,
    "contest_name": "DreamSpark 2010",
    "languages_supported": "C, JAVA, CS2, TEXT",
    "todo": false,
    "time": {
        "view_start_date": 1267273800,
        "end_date": 1267381800,
        "practice_submission_allowed": false,
        "visible_start_date": 1654180176,
        "submit_start_date": 1267273800,
        "current": 1537439713
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #1E7D22;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>2&#9733;</span><span>rushikesh30</span>",
    "problem_name": "References",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/rushikesh30'>rushikesh30</a>",
    "problem_tester_html_handle": "",
    "problem_author": "rushikesh30",
    "contest_code": "CSOC20",
    "max_timelimit": "0.1",
    "problem_code": "DPC106"
}