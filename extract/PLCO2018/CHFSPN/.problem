{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>Chef is viewing a tree and observes that the tree has some special nodes in it. Chef, curious as always wonders what is the minimum distance between any 2 special nodes, but due to the weak eyesight of chef if any two special nodes are adjacent to each other it appears to him as a single special node.\n (or special group).</br> Due to this constraint of his eyes you have to help chef find the minimum distance between any two special nodes according to the visibility of the chef and also find the sum of sizes of the two special nodes or groups which are at the minimum distance.</br></br><b>Note: </b> If there are multiple such answers maximize the sum of sizes of the  two special nodes or groups.</p>\n\n<p> It is guranteed that more than 1 group exist.</p>\n\n<h3>Input</h3>\n<p>First line contains a single integer <b>N</b> denoting the number of nodes</br>Next n-1 lines contains two integers <b>U</b> and <b>V</b> each depicting edge between <b>U</b> and <b>V</b></br> Next line contains an integer <b>K</b>, the number of special nodes.</br> Next line contains <b>K</b> integers the index of the special nodes.</p>\n\n<h3>Output</h3>\n<p>Two integers in a single line first the minimum distance and second the sum of sizes of the special nodes or group./p>\n\n<h3>Constraints</h3>\n<p>Should contain all the constraints on the input data that you may have. Format it like:</p>\n<ul>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>1000000</b></li>\n<li><b>1</b> \u2264 <b>K</b> \u2264 <b>50000</b></li>\n</ul>\n<p>\u00a0</p>\n<h3>Example</h3>\n<pre><b>Input:</b>\n6\n1 2\n1 3\n1 4\n2 5\n3 6\n3\n2 4 5 6\n\n<b>Output:</b>\n2 3\n</pre>\n<p>\u00a0</p>\n<h3>Explanation</h3>\n<p>Node 2 and 5 will combine to form 1 special group and minimum distance will be 2 of this special group from node 4.</p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "12-01-2018",
    "is_direct_submittable": false,
    "contest_name": "Enigma - Plinth Codesprint",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "todo": false,
    "time": {
        "view_start_date": 1516030200,
        "end_date": 1516041900,
        "practice_submission_allowed": true,
        "visible_start_date": 1516041900,
        "submit_start_date": 1516030200,
        "current": 1537433176
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>killjee</span>",
    "problem_name": "Chef and Special Nodes",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/killjee'>killjee</a>",
    "problem_tester_html_handle": "",
    "problem_author": "killjee",
    "contest_code": "PLCO2018",
    "max_timelimit": "1",
    "problem_code": "CHFSPN"
}