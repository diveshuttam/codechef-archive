{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\u00a0</p>\n<p>You take N number of students to an arcade to have them play games. The arcade has M gaming consoles available. Let the time you reach the arcade be denoted by 0 and it progresses by 1 with every passing second.\n\nYour students can be described by a set of three integers \"t x y\" which denotes that this student wants to play any game for t seconds between the interval [x,y].\n\nBeing the programmer that you are, you decide to write a code to determine whether it is possible to satisfy every student, and if it is, to determine when should the students be allowed to play in order to satisfy all of them.\n</p>\n<p>\u00a0</p>\n\n\n<h3>Input</h3>\n<p>Input consists of multiple test cases.\nEach test case begins on a new line with two integers N and M.\nN lines follow, ith of them describing the ith student with three integers \"t x y\".\nInput ends with a 0.</p>\n\n\n<h3>Output</h3>\n<p>Print the answer for each test case on a new line.\nIf it is not possible to satisfy every student, print \"No\".<br>\nIf it is possible to satisfy every student, print \"Yes\" and then on the next N lines, give the time intervals that the i<sub>th</sub> student should be allowed to play in.<br><br>\nInformation for every student is of the format : nn x<sub>1</sub>,y<sub>1</sub> x<sub>2</sub>,y<sub>2</sub> .... x<sub>nn</sub>,y<sub>nn</sub>\nwhere nn is the number of different intervals the student plays the game for and x<sub>i</sub>,y<sub>i</sub> denote the start and ending times for the i<sub>th</sub> interval.<br><br>\nAll the intervals must be space separated and must occur in ascending order.\nOutput for the students must be in the same order that they were given in the input.\nLook at the sample IO for clarity.</p>\n\n<h3>Constraints</h3>\n<ul>\n<li>1 <= N <= 100</li>\n<li>1 <= M <= 5</li>\n<li>0 <= t, x, y <= 50000</li>\n<li>x < y</li>\n<li>0 < t <= y - x</li>\n</ul>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n3 1 \n2 2 9 \n2 3 5 \n3 5 8 \n2 1 \n4 5 9 \n4 8 12 \n5 2 \n2 1 3 \n2 3 5 \n2 5 7 \n2 1 7 \n4 2 6 \n0 \n\n<b>Output:</b>\nYes\n2 2,3 8,9\n1 3,5\n1 5,8\nNo\nYes\n1 1,3\n1 3,5\n1 5,7\n2 1,2 6,7\n1 2,6\n</pre>\n<p>\u00a0</p>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "14-10-2017",
    "is_direct_submittable": false,
    "contest_name": "Atmos CodeJam Qualifiers",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "todo": false,
    "time": {
        "view_start_date": 1508079600,
        "end_date": 1508090400,
        "practice_submission_allowed": true,
        "visible_start_date": 1508090400,
        "submit_start_date": 1508079600,
        "current": 1537433456
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #666666;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>1&#9733;</span><span>rock7lee</span>",
    "problem_name": "Arcadeya Bae",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/rock7lee'>rock7lee</a>",
    "problem_tester_html_handle": "",
    "problem_author": "rock7lee",
    "contest_code": "ACJQ2017",
    "max_timelimit": "1",
    "problem_code": "ATMOQ7"
}