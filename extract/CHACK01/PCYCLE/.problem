{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p> We consider <em>permutations</em> of the numbers 1,..., <em>N</em>\nfor some <em>N</em>.  By permutation we mean a rearrangment of the\nnumber 1,...,<em>N</em>.  For example</p>\n\n<pre>\n2  4  5  1  7  6  3  8\n</pre>\n\n<p> is a permutation of 1,2,...,8.  Of course,</p>\n\n<pre>\n1  2  3  4  5  6  7  8\n</pre>\n\n<p> is also a permutation of 1,2,...,8.</p>\n\n<p> We can \"walk around\" a permutation in a interesting way and here\nis how it is done for the permutation above:</p>\n\n<p> Start at position 1. At position 1 we have 2 and so we go to\nposition 2.  Here we find 4 and so we go to position 4.  Here we find\n1, which is a position that we have already visited. This completes\nthe first part of our walk and we denote this walk by (1 2 4 1). Such\na walk is called a <em>cycle</em>.  An interesting property of such\nwalks, that you may take for granted, is that the position we revisit\nwill always be the one we started from! </p>\n\n<p> We continue our walk by jumping to first unvisited position, in\nthis case position 3 and continue in the same manner. This time we\nfind 5 at position 3 and so we go to position 5 and find 7 and we go\nto position 7 and find 3 and thus we get the cycle (3 5 7 3).  Next we\nstart at position 6 and get (6 6) and finally we start at position 8\nand get the cycle (8 8). We have exhausted all the positions.  Our\nwalk through this permutation consists of 4 cycles.</p>\n\n<p> One can carry out this walk through any permutation and obtain a\nset of cycles as the result.  Your task is to print out the cycles\nthat result from walking through a given permutation.</p>\n\n<p>Input format</p>\n\n<p> The first line of the input is a positive integer <em>N</em>\nindicating the length of the permutation. The next line contains\n<em>N</em> integers and is a permutation of 1,2,...,<em>N</em>.</p>\n\n<p> You may assume that <em>N</em> \u2264 1000.</p>\n\n<p>Output format</p>\n\n<p> The first line of the output must contain a single integer\n<em>k</em> denoting the number of cycles in the permutation.  Line 2\nshould describe the first cycle, line 3 the second cycle and so on and\nline <em>k</em>+1 should describe the kth cycle.</p>\n\n\n\n<p>Examples</p>\n\n<p>Sample input 1:</p>\n\n<pre>\n8\n2 4 5 1 7 6 3 8\n</pre>\n\n\n<p>Sample output 1:</p>\n\n<pre>\n4\n1 2 4 1\n3 5 7 3\n6 6\n8 8 \n</pre>\n\n<p>Sample input 2:</p>\n\n<pre>\n8\n1 2 3 4 5 6 7 8\n</pre>\n\n<p>Sample output 2:</p>\n\n<pre>\n8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n</pre>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "28-07-2009",
    "is_direct_submittable": false,
    "contest_name": "Codehack 2010",
    "languages_supported": "C, JAVA, PYTH, CS2, PAS fpc, PAS gpc, RUBY, PHP, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile",
    "todo": false,
    "time": {
        "view_start_date": 1265480940,
        "end_date": 1265502600,
        "practice_submission_allowed": true,
        "visible_start_date": 1733529474,
        "submit_start_date": 1265480940,
        "current": 1537439751
    },
    "problem_author_html_handle": "admin",
    "problem_name": "Permutation Cycles",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/admin'>admin</a>",
    "problem_tester_html_handle": "",
    "problem_author": "admin",
    "contest_code": "CHACK01",
    "max_timelimit": "0.238676",
    "problem_code": "PCYCLE"
}