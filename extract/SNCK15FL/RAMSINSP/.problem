{
    "problem_code": "RAMSINSP",
    "problem_author": "kevinsogo",
    "contest_name": "CodeChef Snackdown 2015 Finale ",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #D0011B;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>7&#9733;</span><span>kevinsogo</span>",
    "problem_name": "City Inspection",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "SNCK15FL",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/combinatorics'>combinatorics</a>, <a class='problem-tag-small ' href='/tags/problems/cycle'>cycle</a>, <a class='problem-tag-small ' href='/tags/problems/eulerian'>eulerian</a>, <a class='problem-tag-small ' href='/tags/problems/kevinsogo'>kevinsogo</a>, <a class='problem-tag-small ' href='/tags/problems/snck15fl'>snck15fl</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCK15FL/mandarin/RAMSINSP.pdf\">Mandarin Chinese </a> , <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCK15FL/russian/RAMSINSP.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCK15FL/vietnamese/RAMSINSP.pdf\">Vietnamese</a></h3>\n<p>Chef Rams is famous for his amazing recipes and his use of colorful language, and he wants to open a new restaurant in the city of ManiLand.</p>\n<p>The city of ManiLand has a very regular grid structure. The city has three <b>main roads</b> from west to east, and <b>N+1</b> shorter <b>secondary roads</b> from south to north. The first main road runs from <b>(0, 0)</b> to <b>(N, 0)</b>, the second from <b>(0, 1)</b> to <b>(N, 1)</b>, and the third from <b>(0, 2)</b> to <b>(N, 2)</b>. The <b>i</b><sup>th</sup> secondary road (<b>0</b> \u2264 <b>i</b> \u2264 <b>N</b>) runs from <b>(i, 0)</b> to <b>(i, 2)</b>. Additionally, there are <b>arterial roads</b> that run diagonally from some <b>(x, y)</b> to <b>(x+1, y+1)</b> or from some <b>(x, y)</b> to <b>(x+1, y-1)</b> (<b>x</b> and <b>y</b> are integers). All roads are bidirectional.</p>\n<p>We also define a <b>block</b> as the square area bounded by corners <b>(x, y)</b>, <b>(x, y+1)</b>, <b>(x+1, y+1)</b>, <b>(x+1, y)</b> for integers <b>x</b> and <b>y</b>. ManiLand is <b>N</b> blocks long and <b>2</b> blocks wide.</p>\n<p>The following figure shows a sample layout of ManiLand (note that arterial roads on the same block also intersect).</p>\n<p><pre><code>\n                         (N, 2)\n   +-----+-----+-----+-----+\n   |\\   /|     |     |     |\n   | \\ / |     |     |     |\n   |  X  |     |     |     |\n   | / \\ |     |     |     |\n   |/   \\|     |     |     |  \n   +-----+-----+-----+-----+\n   |     |\\    |    /|    /|\n   |     | \\   |   / |   / |\n   |     |  \\  |  /  |  /  |\n   |     |   \\ | /   | /   |\n   |     |    \\|/    |/    |\n   +-----+-----+-----+-----+\n(0, 0)\n</code></pre></p>\n<p>The police station is located at the intersection <b>(0, 0)</b>. Now, the police have a daily routine of inspecting all roads, and to inspect any part of road they must pass through it. However, they find out that whenever they perform the inspection, they always end up traversing some road (or part of some road) more than once.</p>\n<p>A particular layout is called <b>inspection-friendly</b> if one can start from the police station, traverse all parts of all roads <i>exactly once</i> (except, possibly, intersections), and end back at the police station. The layout above is not inspection-friendly, but the following one is:</p>\n<p><pre><code>\n+-----+-----+-----+-----+            +--3--+--4--+--5--+--6--+\n|    /|    /|    /|     |            |    /|    /|    /|     |\n|   / |   / |   / |     |            |   / |   / |   / |     |\n|  /  |  /  |  /  |     |            2  17 16 15 14 13 12    7\n| /   | /   | /   |     |            | /   | /   | /   |     |\n|/    |/    |/    |     |            |/    |/    |/    |     |\n+-----+-----+-----+-----+   ----->   +--18-+--19-+--20-+--11-+\n|     |\\   /|     |    /|            |     |\\   /|     |    /|\n|     | \\ / |     |   / |            |     |26 24|     |   / |\n|     |  X  |     |  /  |            1    25  X  23    21 10 8\n|     | / \\ |     | /   |            |     | / \\ |     | /   |\n|     |/   \\|     |/    |            |     |/   \\|     |/    |\n+-----+-----+-----+-----+            +--28-+--27-+--22-+--9--+\n</code></pre></p>\n<p>(Note that each road is traversed exactly once. Some intersections are traversed twice, but that's okay.)</p>\n<p>Now, the government wants to make ManiLand inspection-friendly because the police hate traversing a road twice and sometimes end up skipping roads. Specifically, the government plans to <i>destroy</i> some arterial roads and <i>build</i> new ones. However, the main roads and secondary roads will be left unchanged.</p>\n<p>The cost of building and destroying an arterial road that goes from <b>(x, y)</b> to <b>(x+1, y+1)</b> is <b>H<sub>b</sub></b> and <b>H<sub>d</sub></b> respectively, and the cost of building and destroying an arterial road that goes from <b>(x, y)</b> to <b>(x+1, y-1)</b> is <b>L<sub>b</sub></b> and <b>L<sub>d</sub></b> respectively. The government wants to know the <b>minimum total cost</b> it needs to make ManiLand inspection-friendly, and the <b>number of ways</b> to achieve this minimum total cost. The arterial roads must obey the <i>ManiLand Public Works and Highways Law</i>:</p>\n<p>\n<ol>\n<li> All arterial roads must run diagonally from some <b>(x, y)</b> to <b>(x+1, y+1)</b> or from some <b>(x, y)</b> to <b>(x+1, y-1)</b>; </li>\n<li> they cannot be built outside the grid; and</li>\n<p><lI>no two arterial roads can connect the same pair of intersections.</li>\n</p></ol>\n</p>\n<p>Note that the order in which the roads are built/destroyed doesn't matter; two ways are considered different only if the resulting layout is different.</p>\n<p>In the first figure above, assuming <b>H<sub>b</sub></b> = <b>20</b>, <b>H<sub>d</sub></b> = <b>15</b>, <b>L<sub>b</sub></b> = <b>4</b>, <b>L<sub>d</sub></b> = <b>31</b>, then the minimum total cost is <b>106</b>, and there are <b>2</b> ways to do it, as shown in the following figure:</p>\n<p><pre><code>\n+-----+-----+-----+-----+         +-----+-----+-----+-----+\n|    /|    /|    /|     |         |    /|     |\\   /|     |\n|   / |   / |   / |     |         |   / |     | \\ / |     |\n|  /  |  /  |  /  |     |         |  /  |     |  X  |     |\n| /   | /   | /   |     |         | /   |     | / \\ |     |\n|/    |/    |/    |     |         |/    |     |/   \\|     |\n+-----+-----+-----+-----+         +-----+-----+-----+-----+\n|     |\\   /|     |    /|         |     |    /|    /|    /|\n|     | \\ / |     |   / |         |     |   / |   / |   / |\n|     |  X  |     |  /  |         |     |  /  |  /  |  /  |\n|     | / \\ |     | /   |         |     | /   | /   | /   |\n|     |/   \\|     |/    |         |     |/    |/    |/    |\n+-----+-----+-----+-----+         +-----+-----+-----+-----+\n</code></pre></p>\n<p>The government hired Chef Rams to calculate these two values for them (they didn't want to hire real programmers because they're very temperamental). They also imposed this as a necessary pre-condition for licensing Chef Rams' proposed restaurant. Chef Rams, desperate to open his restaurant but not knowing any programming at all, turned to you for help. Please help Chef Rams!</p>\n<p>Now, ManiLand is very long (i.e. <b>N</b> is very large), but thankfully, the current layout is predictable. The whole layout of length <b>N</b> consists of a segment of length <b>K</b> (i.e. <b>2K</b> blocks) that repeats <b>N/K</b> times. (Note that you don't have to maintain this regular structure when trying to make the city inspection-friendly)</p>\n<h3>Input</h3>\n<p>The first line of the input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.</p>\n<p>The first line of each test case contains six integers <b>H<sub>b</sub></b>, <b>H<sub>d</sub></b>, <b>L<sub>b</sub></b>, <b>L<sub>d</sub></b>, <b>N</b> and <b>K</b>, denoting the costs of building/destroying as described above, the length of the layout and the length of the pattern that repeats. The second and third line both contain a string of length <b>K</b> consisting of the characters \u2018<code>/</code>\u2019, \u2018<code>\\</code>\u2019, \u2018<code>X</code>\u2019 and  \u2018<code>.</code>\u2019, each representing a block. The \u2018<code>/</code>\u2019 and \u2018<code>\\</code>\u2019 represents a block with one arterial road, \u2018<code>X</code>\u2019 represents a block with two arterial roads, and \u2018<code>.</code>\u2019 represents a block with no arterial roads. See the sample input for more information.</p>\n<h3>Output</h3>\n<p>For each test case, output a single line containing two integers, which is the minimum total cost and the number of ways to achieve this cost. Since the number of ways to achieve this total cost can be very large, only output the answer <b>modulo 10<sup>9</sup> + 7</b>.</p>\n<p>If it is impossible to make it inspection-friendly, output \u201ca kitchen nightmare\u201d (without quotes).</p>\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>10<sup>5</sup></b></li>\n<li><b>1</b> \u2264 <b>K</b> \u2264 <b>10<sup>5</sup></b></li>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>10<sup>15</sup></b></li>\n<li>The sum of all values <b>K</b> in a single test file is at most <b>10<sup>5</sup></b></li>\n<li><b>K</b> divides <b>N</b></li>\n<li><b>1</b> \u2264 <b>H<sub>b</sub></b>, <b>H<sub>d</sub></b>, <b>L<sub>b</sub></b>, <b>L<sub>d</sub></b> \u2264 <b>1000</b></li>\n</ul>\n<h3>Example</h3>\n<pre><b>Input:</b>\n<code>3\n20 15 4 31 4 4\nX...\n.\\//\n1 3 4 10 2 1\nX\n/\n11 11 11 11 1 1\n.\n.</code>\n\n<b>Output:</b>\n<code>106 2\n26 2\na kitchen nightmare</code>\n</pre><h3>Explanation</h3>\n<p><b>Example case 1.</b> This is the example above.</p>\n<p><b>Example case 2.</b> Note that <b>N</b> = <b>2</b> and <b>K</b> = <b>1</b>, which means the pattern given in the input is repeated <b>N/K</b> = <b>2</b> times. There are two ways make this inspection-friendly with the minimum cost of <b>26</b>, as shown in the following:</p>\n<p><pre><code>\n+-----+-----+            +-----+-----+         +-----+-----+\n|\\   /|\\   /|            |    /|     |         |     |\\    |\n| \\ / | \\ / |            |   / |     |         |     | \\   |\n|  X  |  X  |            |  /  |     |         |     |  \\  |\n| / \\ | / \\ |            | /   |     |         |     |   \\ |\n|/   \\|/   \\|            |/    |     |         |     |    \\|\n+-----+-----+   ----->   +-----+-----+         +-----+-----+\n|    /|    /|            |     |    /|         |\\    |     |\n|   / |   / |            |     |   / |         | \\   |     |\n|  /  |  /  |            |     |  /  |         |  \\  |     |\n| /   | /   |            |     | /   |         |   \\ |     |\n|/    |/    |            |     |/    |         |    \\|     |\n+-----+-----+            +-----+-----+         +-----+-----+\n</code></pre></p>\n<p><b>Example case 3.</b> No matter which arterial roads you build, it's impossible to make this layout inspection-friendly.</p>\n",
    "category_name": "main",
    "date_added": "3-10-2014",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "max_timelimit": " - 1.5",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/RAMSINSP",
    "problem_tester": null,
    "time": {
        "view_start_date": 1435390200,
        "end_date": 1435408200,
        "practice_submission_allowed": true,
        "visible_start_date": 1435408200,
        "submit_start_date": 1435390200,
        "current": 1537436231
    },
    "user": {
        "username": ""
    }
}