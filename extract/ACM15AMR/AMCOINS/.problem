{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p><html><br />\n<head><br />\n    <title>COINS</title><br />\n</head><br />\n<body></body></html></p>\n<p>\n    Our <i>Farzi Coder</i> likes <i>Mota Chuha</i> a lot, as he runs very fast and catching him is not only hard, but also impossible.\n\t</p>\n<p>\n    The city is in the form of a tree (Graph Theory Tree), with <b>N</b> junctions with exactly one follower of <i>Farzi Coder</i> in each. There are <b>N</b>-1 bidirectional roads connecting these junctions such that there is exactly one distinct path between any pair of junctions.\n\t</p>\n<p>\n    Now <i>Farzi Coder</i> decides to distribute some of his illegal wealth among his followers so as to maintain their loyalty and wants <i>Mota Chuha</i> to do this task for him. In between the process of distribution, <i>Farzi Coder</i> would also ask <i>Mota Chuha</i> some questions, to check if he is really distributing the coins correctly or not.\n\t</p>\n<p>\n    Now for the next <b>Q</b> days, on each day, he assigns exactly one of the following two tasks to the <i>Mota Chuha</i>:</p>\n<ol>\n<li>Give(<b>X</b>,<b>Y</b>,<b>W</b>) => Give one <b>W</b> rupee coin to all followers along the path in the tree between the followers <b>X</b> and <b>Y</b> (including <b>X</b> and <b>Y</b>).</li>\n<li>Find(<b>Z</b>, <b>I</b>, <b>J</b>, <b>K</b>) => Find the <b>K</b>'th smallest coin among all the coins present in the hands of follower <b>Z</b> which were distributed between <b>I</b>'th and <b>J</b>'th day (including <b>I</b>'th and <b>J</b>'th Days). If <b>Z</b> has less than <b>K</b> coins, then report <b>-1</b>. It is guaranteed that <b>J</b> will be less than the current day number.</li>\n</ol>\n\n<p>\n    <i>Mota Chuha</i> is too lazy to distribute the wealth. But he has to answer the Find() tasks. He knows that ICPC participants are very smart and can simulate the Update() tasks through a program and can answer the Find() tasks very fast. So please help him, he might give some of the coins to you.\n\t</p>\n<p>\n\t\tNote that a person can hold multiple coins of same value. Let us say, person <b>Z</b> has <b>P</b> coins with him which were distributed between <b>I</b>'th and <b>J</b>'th Days, i.e, Coin[1], Coin[2]...C[<b>P</b>]. Sort the array Coin[1...P]. Now, <b>K</b>'th smallest coin is Coin[<b>K</b>].\n\t</p>\n<p>\n\t\tExample: If person <b>Z</b> has coins {1, 2, 3, 3, 4}. Then, 2nd smallest coin is 2, 3rd smallest coin is 3, 4th smallest coin is 3, 5th smallest coin is 4.\n\t</p>\n<p>\n              <b>Note:</b>Number of Update tasks will be less <b>51%</b> of the total tasks. The memory limit of the problem will be 1.5 GB.\n       </p>\n<h2>Input</h2>\n<p>\n\tThe first line contains one integer <b>N</b>, size of the tree.\n\t</p>\n<p>\n\tNext <b>N</b>-1 lines contain two space separated integers \"<b>X</b> <b>Y</b>\" (without quotes) each, representing that there is an edge between the nodes (<b>X</b>, <b>Y</b>).\n\t</p>\n<p>\n\tNext line contains an integer <b>Q</b>.\n\t</p>\n<p>\n\tNext <b>Q</b> lines contains the tasks given to <i>Mota Chuha</i>. If the first integer in the line is 1, then it is followed by three integers space separated integers \"<b>X</b> <b>Y</b> <b>W</b>\" (without quotes) denoting the first type of task. Else if the first integer in the line is 2, then it is followed by 4 space separated integers \"<b>Z</b> <b>I</b> <b>J</b> <b>K</b>\" (without quotes) denoting the second type of task.\n    </p>\n<h2>Output</h2>\n<p>    For each task of type 2, output the required answer.</p>\n<h2>Constraints</h2>\n<ul>\n<li>1 \u2264 <b>N</b> \u2264 500000</li>\n<li>1 \u2264 <b>X</b>, <b>Y</b>, <b>Z</b> \u2264 <b>N</b></li>\n<li>1 \u2264 <b>I</b> \u2264 <b>J</b> &lt; <i>Current Day Number</i></li>\n<li>1 \u2264 <b>W</b> \u2264 100000</li>\n<li>1 \u2264 <b>Q</b> \u2264 100000</li>\n<li>1 \u2264 <b>K</b> \u2264 <b>J - I + 1</b></li>\n</ul>\n<h2>Sample</h2>\n<h3>Input</h3>\n<pre>\n2\n1 2\n4\n1 1 2 121\n1 1 2 256\n2 1 1 1 1\n2 1 2 2 1\n    </pre><h3>Output</h3>\n<pre>\n121\n256\n    </pre><p>\n<br />\n</p>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "21-12-2015",
    "is_direct_submittable": false,
    "contest_name": "ACM-ICPC Asia-Amritapuri Site Onsite round 2015",
    "languages_supported": "C, CPP14, JAVA",
    "todo": false,
    "time": {
        "view_start_date": 1450682700,
        "end_date": 1450691700,
        "practice_submission_allowed": true,
        "visible_start_date": 1761685767,
        "submit_start_date": 1450682700,
        "current": 1537435708
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;</span><span>adurysk</span>",
    "problem_name": "COINS",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/adurysk'>adurysk</a>",
    "problem_tester_html_handle": "",
    "problem_author": "adurysk",
    "contest_code": "ACM15AMR",
    "max_timelimit": "5",
    "problem_code": "AMCOINS"
}