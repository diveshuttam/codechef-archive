{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>People have been judging Flippy, the fish, by his ability to climb trees and thus making Flippy feel stupid. As a result Flippy has started to get depressed. Concerned about her son, Flippy's mother, Petunia, has brought him a flying boat to cheer him up. The boat can not only fly as high as the tall trees, but it can also move in any of the <b>2*K</b> directions of the <b>K-dimensional world</b> Flippy lives in.\n</p>\n<p>\nThe position of the boat is denoted by its coordinates and is given by a sequence of <b>K</b> integers {<b>C<sub>1</sub></b>, <b>C<sub>2</sub></b>...<b>C<sub>K</sub></b>}. At the beginning the boat is at the position where <b>each of the K coordinates are 0</b>. Moving one step in a direction will either increment or decrement one of the <b>K</b> coordinates. The boat has <b>2*K+2</b> buttons which are labeled from <b>1</b> to <b>2*K+2</b>. Two of the buttons are <b>'start'</b> and <b>'stop'</b>. The other <b>2*K</b> buttons become active once the <b>start</b> button is pressed and they become inactive as soon as <b>stop</b> is pressed. Each of these <b>2*K</b> buttons correspond to one of the <b>2*K</b> directions and move the boat one step in that direction if pressed when active.<br />\nFor instance, a button corresponding to the positive direction of the <b>j<sup>th</sup></b> coordinate will change <b>C<sub>j</sub></b> to <b>C<sub>j</sub>+1</b>. No two buttons move the boat in the same directions. Pressing the <b>start</b> button when the boat has already been started has not effect and similarly, pressing the <b>stop</b> button when the boat has not been started has not effect.\n</p>\n<p>Flippy has spent most of his life under the sea, eating seaweed and blowing bubbles with his friends. So he is terrified at the thought of flying in a boat all alone. Moreover, <i>he has no clue what operations each of the buttons perform!</i> When he sits in the boat for the first time, he panics so much that he shuts his eyes tightly and goes berserk pressing buttons arbitrarily. After Flippy opens his eyes, the poor fish finds himself stranded in an unknown place with no way of going back home! <br /><br />\nBut all is not lost. The boat has a navigation screen which shows the coordinates of its current position. It also shows the exact sequence of buttons Flippy pressed in the order they were pressed. Flippy will give you the information showed on the screen. Please help Flippy figure out the roles each of the <b>2*K+2</b> buttons.</p>\n<p><br /><br />\nNote that the coordinates can be negative - The magnificent boat can go under water too!\n</p>\n<h3>Input</h3>\n<p>Input description.</p>\n<ul>\n<li>The first line of the input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.</li>\n<li>The first line of each test case contains two space separated integers <b>N</b> denoting the number of buttons pressed by flippy and <b>K</b></li>\n<li>The second line contains <b>N</b> space-separated integers <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b> denoting the the labels of the buttons Flippy pressed with <b>A<sub>1</sub></b> being the first button pressed and <b>A<sub>N</sub></b> being the last.</li>\n<li>The third line contains <b>K</b> space-separated integers <b>C<sub>1</sub></b>, <b>C<sub>2</sub></b>, ..., <b>C<sub>K</sub></b>, the coordinates shown on the screen.</li>\n</ul>\n<h3>Output</h3>\n<p>Output description.</p>\n<ul>\n<li>For each test case, print <b>2*K+2</b> space separated integers denoting a permutation of the <b>2*K+2</b> labels of the buttons, such that the first button in the permutation is the start button, the second button is the stop button and the <b>2*(j+1)-1<sup>th</sup></b> button is the one which increases the <b>j<sup>th</sup></b> coordinate of the boat by one, and the <b>2*(j+1)<sup>th</sup></b> button decreases the <b>j<sup>th</sup></b> coordinate of the boat by 1.</li>\n<li>If there are multiple such permutations possible find the lexicographically smallest one and hope that Flippy reaches home safely.</li>\n<li> If it is not possible to reach the coordinates showed on the screen with the sequence of buttons Flippy pressed then Flippy is indeed a stupid fish! So, output <b>\"Stupid Fish\"</b> (without quotes) instead.\n</li>\n</ul>\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>20</b></li>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>10<sup>5</sup></b></li>\n<li><b>1</b> \u2264 <b>K</b> \u2264 <b>6</b></li>\n<li><b>1</b> \u2264 <b>A<sub>i</sub></b> \u2264 <b>2*K+2</b></li>\n<li><b>-10<sup>5</sup></b> \u2264 <b>C<sub>i</sub></b> \u2264 <b>10<sup>5</sup></b></li>\n</ul>\n<h3>Example</h3>\n<pre><b>Input:</b>\n2\n10 2\n5 4 2 1 5 3 2 5 1 3\n-2 2\n4 3\n2 2 2 2 \n0 0 -1\n\n<b>Output:</b>\n2 3 4 1 5 6\nStupid Fish\n</pre><h3>Explanation</h3>\n<p>In the first test case, Flippy lives in a <b>2-dimensional</b> world, and the boat ends up at <b>(-2,2)</b>. Suppose the start button has label <b>2</b> and the stop button has label <b>3</b>, then, only the presses <b>A[4]</b>,<b>A[5]</b>,<b>A[8]</b> and <b>A[9]</b> affect the position of the boat. Notice that the boat can be started multiple times.<br/>One of button <b>5 </b> and button <b>1</b> has to be the button which decreases the first coordinate and the other one has to be the button which increases the second coordinate. Taking button <b>1</b> as the button for decreasing the first coordinate gives a lexicographically smaller solution.\n<p>In the second test case, if we take <b>2</b> to be the start button, then no other buttons are pressed and the position of boat cannot change. If <b>2</b> is not the start button then the button <b>2</b> will not have any effect because the boat has never been started. So, there's no solution.</p>\n</br/></p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "7-02-2016",
    "is_direct_submittable": false,
    "contest_name": "ICPC Preparatory Series by Team ForTheWatch",
    "languages_supported": "C, CPP14, JAVA",
    "todo": false,
    "time": {
        "view_start_date": 1454833800,
        "end_date": 1454851800,
        "practice_submission_allowed": true,
        "visible_start_date": 1454851800,
        "submit_start_date": 1454833800,
        "current": 1537435515
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>meteora</span>",
    "problem_name": "Flying Fish",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/meteora'>meteora</a>",
    "problem_tester_html_handle": "",
    "problem_author": "meteora",
    "contest_code": "IPC15P2C",
    "max_timelimit": "2",
    "problem_code": "FISHY"
}