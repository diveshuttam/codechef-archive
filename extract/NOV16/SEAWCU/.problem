{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": "xcwgf666",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/NOV16/mandarin/SEAWCU.pdf\">Mandarin Chinese</a>, <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/NOV16/russian/SEAWCU.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/NOV16/vietnamese/SEAWCU.pdf\">Vietnamese</a> as well.</h3>\n\n\n<p>\nSereja has a cube <b>A</b> of <b>N x N x N</b> cells. The\nthe cell at position <b>(X, Y, Z)</b> contains a number <b>A[X][Y][Z]</b>. You have to to find a sequence of cells <b>(X[1], Y[1], Z[1]), (X[2], Y[2], Z[2]), ..., (X[K], Y[K], Z[K])</b> (triples of integers between <b>1</b> and <b>N</b>) satisfying the following properties:\n<ul>\n<li> The first cell lies on the front side, i.e. <b>X[1] = 1</b>. </li>\n<li> Each pair of consecutive cells in the sequence are adjacent. Here, we say two cells <b>(X, Y, Z), (X', Y', Z')</b> are adjacent if <b>|X-X'| + |Y-Y'| + |Z-Z'| = 1</b>.</li>\n<li> Two non-consecutive cells in the sequence are not adjacent. That is, if <b>i</b> and <b>j</b> are two indices into the sequence with <b>i+2</b> \u2264 <b>j</b> then <b>|X[i]-X[j]| + |Y[i]-Y[j]| + |Z[i]-Z[j]| \u2260 1</b>. </li>\n<li> No two cells in the sequence are the same. </li>\n</ul>\n</p>\n\n<p>\nHelp Sereja, find such a sequence that maximize the sum of the numbers stored at the cells in the sequence.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.\n</p>\nThe first line of each test case contains integer <b>N</b>. Then <b>N</b> <i>blocks</i> of input follow where each block consists of <b>N</b> lines, each containing <b>N</b> integers. The <b>X</b>-th number in the <b>Y</b>-th line of <b>Z</b>-th block is the value <b>A[X][Y][Z]</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nThe first line of output for each test case should contain number <b>K</b> - the number of cells in the sequence. The next <b>K</b> lines should contain three space-separated integers: the <b>X,Y,Z</b> indices of the cell.\n</p>\n\n\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>10</b></li>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>50</b></li>\n<li><b>-1000000</b> \u2264 <b>A[i][j][k]</b> \u2264 <b>1000000</b></li>\n</ul>\n<p>\u00a0</p>\n<h3>Example</h3>\n<pre><b>Input:</b>\n1\n2\n1 1\n1 1\n1 1\n1 1\n\n<b>output:</b>\n4\n1 1 1\n1 1 2\n1 2 2\n2 2 2\n</pre>\n<p>\u00a0</p>\n<h3>Test generation</h3>\nEach test will contain <b>T=10</b> test cases and <b>N</b> will always be equal to <b>50</b>.\nThere will be <b></b> three types of tests:\n<ul>\n<li>Every number in the cube will be from the set {1, 0, -1000000}. The cube will be generated in the following way. Originally it will be filled with only 1s. Then a randomly-chosen 5% of the positions will be filled with 0.\nFinally, while less than 20% of the cube consists of -1000000 entries, some subcube will be filled with -1000000 entries.</li>\n<li>Every number in cube will be from the set {10000, 1000, 100, 1, 0, -1000000}. This will be generated in the same way as previous test, but originally all numbers are random positives number from the set.</li>\n<li>80% of numbers are positive numbers from the interval [1, 1000000]. 20% are randomly chosen from the set {-1, -10, -100, -1000, -10000, -100000, -1000000}.</li>\n</ul>\n<h3>Scoring</h3>\nFor each test case, let <b>S</b> be the sum of values on the selected path. Let <b>W</b> be the average value of positive numbers inside of the cube. Lets <b>Sum</b> be the sum of the values <b>max(S/W, 1)</b> among all test cases. Lets <b>Best</b> be the maximum value of <b>Sum</b> among all participants. Your displayed score will be <b>Sum/Best</b>. ",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "7-10-2016",
    "is_direct_submittable": false,
    "contest_name": "November Challenge 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1478251800,
        "end_date": 1479115800,
        "practice_submission_allowed": true,
        "visible_start_date": 1479115800,
        "submit_start_date": 1478251800,
        "current": 1537434388
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>sereja</span>",
    "problem_name": "Sereja and Ways in the Cube",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/sereja'>sereja</a>",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>xcwgf666</span>",
    "problem_author": "sereja",
    "contest_code": "NOV16",
    "max_timelimit": "3",
    "problem_code": "SEAWCU"
}