{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" \nhref=\"http://www.codechef.com/download/translated/SNCKFL17/mandarin/MATRIXUM.pdf\">Mandarin Chinese</a>, <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL17/russian/MATRIXUM.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL17/vietnamese/MATRIXUM.pdf\">Vietnamese</a> as well.</h3>\n\n<p>We call an <b>N</b> \u00d7 <b>M</b> matrix <i>nice</i>, if it satisfies both these conditions:</p>\n\n<ul>\n<li>Each of its elements is either a 0 or a 1.</li>\n<li>We define two cells of the matrix to be <i>adjacent</i>, if they share a side. All the cells containing a 1 should form a single connected component.\n<p>More formally: You should be able to reach any cell containing a 1 from any other cell containing a 1 through a sequence of steps, where a single step consists of moving from one cell containing a 1, to an adjacent cell containing a 1. </p></li>\n</ul>\n<p></p>\n\n<p>You are given an <b>N</b> \u00d7 <b>M</b> matrix <b>A</b>, and each of its elements is either a 0 or a 1. You want to decompose <b>A</b> into some <i>terms</i>, where each term is a sign ( + or - ) followed by a nice matrix. In other words, you want to write <b>A</b> as the addition and subtraction of some nice matrices.</p> \n\n<p>For example, you could write <b>A</b> = + B<sub>1</sub> + B<sub>2</sub> - B<sub>3</sub> + B<sub>4</sub> - B<sub>5</sub>, where each B<sub>i</sub> is a nice matrix. Note that even though every single B<sub>i</sub> and their total sum (which equals <b>A</b>) has only elements 0 and 1, some prefix sum could have other elements. For example, the matrix corresponding to + B<sub>1</sub> + B<sub>2</sub> - B<sub>3</sub> could have elements which are neither 0 nor 1.</p>\n\n<p>Find the smallest number of nice matrices needed to decompose <b>A</b> in the manner described above and output them. If there are multiple ways to do this, you can output any one optimal decomposition.</p>\n\n<h3>Input</h3>\n<p>The first line of the input contains an integer <b>T</b> denoting the number of test cases. </p>\n<p>The first line of every test case contains two integers, <b>N</b> and <b>M</b>, which denote the number of rows and number of columns respectively.</p>\n<p>The i-th of the following <b>N</b> lines contains a string of length <b>M</b> and consisting only of characters '0' and '1', which denotes the i-th row of the matrix <b>A</b>.</p>\n\n<h3>Output</h3>\n<p>For each test case, first output a line with a single integer <b>k</b>, which denotes the smallest number of nice matrices needed to decompose <b>A</b>.</p>\n<p>This should be followed by <b>k</b> * (<b>N</b> + 1) lines, which correspond to the <b>k</b> terms.</p>\n<p>Each term should have <b>N</b> + 1 lines. The first line of each term should contain either a '+' or a '-', which denotes whether the following nice matrix is to be added or subtracted. The following <b>N</b> lines should denote the <b>N</b> rows of the nice matrix, with each line containing a string of length <b>M</b>.</p>\n\n<h3>Constraints</h3>\n<ul>\n  <li>1 \u2264 <b>T</b> \u2264 10<sup>3</sup></li>\n  <li>1 \u2264 <b>N, M</b> \u2264 20</li>\n  <li>There will be at most 100 test cases where <b>N</b> > 10 or <b>M</b> > 10.</li>\n  <li>The matrix <b>A</b> is guaranteed to have at least one non-zero element.</li>\n</ul>\n<p> </p>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n1\n3 4\n1010\n0101\n1010\n\n<b>Output:</b>\n3\n-\n0000\n0010\n0000\n+\n1010\n1111\n1010\n-\n0000\n1000\n0000\n</pre>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": null,
    "is_direct_submittable": false,
    "contest_name": "SnackDown 2017 Onsite Final Round",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1498890900,
        "end_date": 1498908900,
        "practice_submission_allowed": true,
        "visible_start_date": 1498908900,
        "submit_start_date": 1498890900,
        "current": 1537433757
    },
    "problem_author_html_handle": null,
    "problem_name": "Matrix Sum",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/alex_2oo8'>alex_2oo8</a>",
    "problem_tester_html_handle": null,
    "problem_author": null,
    "contest_code": "SNCKFL17",
    "max_timelimit": "1",
    "problem_code": "MATRIXUM"
}