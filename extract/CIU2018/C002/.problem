{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span>There are N users registered on a website <b>Fakebook.com. </b>\nEach of them have a unique password represented by pass[1], pass[2], ..., pass[N]. \n<br><br>\nAs this a social media website, many people want to login and communicate with people. But the adamant admin doesn't want this site to be available for general public. \n<br>So only those people who have passwords can access it.\n\n<br><br><br>\n\n<b>OurMine</b> being an awesome hacker finds a loophole in their password verification system. \n<br>A string which is concatenation of one or more passwords, in any order, is also accepted by the password verification system. \n<br><br>\nAny password can appear 0 or more times in that string. He has access to each of the N passwords, and also have a string loginAttempt, he has to tell whether this string be accepted by the password verification system of the website.\n\n<br><br><br>\n\n<b>For example 1,</b> if there are 3 users with password {\" khul \", \"ja\", \"simsim\"}, then some of the valid combinations are:\n<br><br> \"khul\" (pass[1]), \"simsim\" (pass[2]+pass[1]), \"jasimsimja\" (pass[2]+pass[3]+pass[2]), \"jasimsimkhul\" (pass[2]+pass[3]+pass[1]) and so on.\n\n<br><br><br>\n\n<b>For example 2, </b>if there are 3 users with password {\"abra\", \"ka\", \"dabra\"}, then some of the valid combinations are:\n<br> <br>\"ka\" (pass[2]), \"kadabra\" (pass[2]+pass[3]), \"kadabraka\" (pass[2]+pass[3]+pass[2]), \"kadabraabra\" (pass[2]+pass[3]+pass[1]) and so on.\n\n<br><br><br>\n\n<b> #### Input Format: </b>\n<br><br><br>\nFirst line contains an integer T, the total number of test cases. Then T test cases follow. <br><br>\nFirst line of each test case contains N, the number of users with passwords. <br><br>\nSecond line contains N space separated strings, pass[1] pass[2] ... pass[N], representing the passwords of each user. \n<br><br>\nThird line contains a string, loginAttempt, for which OurMine has to tell whether it will be accepted or not.\n\n\n<br><br><br>\n\n<b> #### Constraints: </b>\n<br><br><br>\n1.  $1 \\leq T \\leq 10$\n<br><br>\n2.  $1 \\leq N \\leq 10$\n<br><br>\n3.  All the passwords are unique. For example: {\"abra\",\"abra\",\"ka\"} is invalid.\n<br><br>\n4.  $1 \\leq length(pass[i]) \\leq 10$; where i belongs to [1,N]\n<br><br>\n5. $1 \\lt length(loginAttempt) \\leq 2000$\n<br><br>\n6. loginAttempt and pass[i] contains only lowercase latin characters ('a'-'z').\n\n<br><br><br>\n\n<b> #### Output Format: </b>\n<br><br><br>\nFor each valid string, OurMine has to print the actual order of passwords, separated by space, whose concatenation results into loginAttempt. \n<br>\nIf there are multiple solutions, print any of them.\n<br>\nIf loginAttempt can't be accepted by the password verification system, then print WRONG PASSWORD.\n\n\n<br><br><br>\n\n<b> #### Sample Input: </b>\n<br><br><br>\n3<br>\n6<br>\nbecause can do must we what<br>\nwedowhatwemustbecausewecan<br>\n2<br>\nhello planet<br>\nhelloworld<br>\n3<br>\nab abcd cd<br>\nabcd<br>\n\n\n<br><br><br>\n\n<b> #### Sample Output: </b>\n<br><br><br>\n\nwe do what we must because we can <br>\nWRONG PASSWORD<br>\nab cd<br>\n\n<br><br><br>\n\n<b> #### Explaination: </b>\n<br><br><br>\n\nSample Case #00: <br> \"wedowhatwemustbecausewecan\" is the concatenation of passwords {\"we\", \"do\", \"what\", \"we\", \"must\", \"because\", \"we\", \"can\"}. That is<br><br>\n\nloginAttempt = pass[5] + pass[3] + pass[6] + pass[5] +  pass[4] + pass[1] + pass[5] + pass[2]<br><br>\nNote that any password can repeat any number of times.\n\n<br><br><br>\nSample Case #01: <br>We can't create string \"helloworld\" using the strings {\"hello\", \"planet\"}.\n<br><br><br>\nSample Case #02: <br>There are two ways to create loginAttempt (\"abcd\"). <br>Both pass[2] = \"abcd\" and pass[1] + pass[3] = \"ab cd\" are valid answers.\n<br><br>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "2-07-2018",
    "is_direct_submittable": false,
    "contest_name": "CodeItUp",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "todo": false,
    "time": {
        "view_start_date": 1530599400,
        "end_date": 1530610200,
        "practice_submission_allowed": true,
        "visible_start_date": 1530610200,
        "submit_start_date": 1530599400,
        "current": 1537432310
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #666666;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>1&#9733;</span><span>mjdubal</span>",
    "problem_name": "Guess it",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/mjdubal'>mjdubal</a>",
    "problem_tester_html_handle": "",
    "problem_author": "mjdubal",
    "contest_code": "CIU2018",
    "max_timelimit": "1",
    "problem_code": "C002"
}