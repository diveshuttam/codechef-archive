{
    "problem_code": "MRO",
    "problem_author": "wittyceaser",
    "contest_name": "ACM-ICPC Asia-Chennai Onsite Replay Contest 2017",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #1E7D22;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>2&#9733;</span><span>wittyceaser</span>",
    "problem_name": "Method Resolution Order",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "CHN17ROL",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/acm17chn'>acm17chn</a>, <a class='problem-tag-small ' href='/tags/problems/chn17rol'>chn17rol</a>, <a class='problem-tag-small ' href='/tags/problems/dynamic-programming'>dynamic-programming</a>, <a class='problem-tag-small ' href='/tags/problems/easy'>easy</a>, <a class='problem-tag-small ' href='/tags/problems/wittyceaser'>wittyceaser</a>",
    "body": "<p>Zotlin is an object-oriented programming language that provides features such as <b>Classes</b> and <b>Functions</b>. Zotlin also has the following features:</p>\n<ul>\n<li>A function with the same name and same declarations can have different implementations in different classes.</li>\n<li>Each class can inherit zero or more classes (excluding itself). If <b>Class A</b> inherits <b>Class B</b>, we say that <b>Class A</b> is a <em>child</em> of <b>Class B</b>.</li>\n<li>A class cannot inherit another class if a cycle is formed by inheritance.</li>\n</ul>\n\n<p></p>\n<p>For example, if Class A inherits Class B and Class B inherits Class C, then Class C cannot inherit Class A.</p>\n\n<p>A Class X is called an ancestor of Class Y, if Y inherits directly or indirectly from Class X. ie, say Class Y inherits from Class Z, which inherits from Class X. Then Class X is an ancestor of both Class Y and Class Z.</p>\n<p></p>\n\n<p>Mr. Zourist \u2014 a very popular programmer \u2014 wrote a program in Zotlin with <b>N</b> classes numbered from <b>1</b> to <b>N</b>. Some of these classes have an implementation of a function <b>F</b>. The Zotlin compiler needs to determine which definition of function <b>F</b> should be called for an object of <b>Class 1</b>.</p>\n<p>In order to deterministically decide which implementation of function <b>F</b> to use, the compiler uses a list called the <b>Resolution Order</b> <em>(RO list)</em>. This is a list containing <b>Class 1</b> and its ancestors. The compiler iterates through this list to search for a class that contains an implementation of function <b>F</b>.</p>\n<p>The properties of an RO list are as follows:</p>\n<ul>\n<li>The 1st member of the list is <b>Class 1</b>.</li>\n<li>The list contains only the ancestors of Class 1. All the Classes in the list are unique.</li>\n<li>It is guaranteed that <b>no Class occurs after any of its ancestors </b>in the list.</li>\n</ul>\n\n<p></p>\n\n<p>Let's define the <em><b>Special RO list</b></em> as an RO list of length <b>N</b> where the <b>i<sup>th</sup></b> member in the list is <b>Class i</b>. That is, the Special RO list is <b>[1, 2, 3, ... , N]</b>.</p>\n<p>Find out the number of distinct class-inheritance hierarchies Mr. Zourist could have created in his program for which one of the valid RO lists is the <em>Special RO list</em>. Print your output modulo 10<sup>9</sup> + 7.</p>\n\n<p>\n    Two class-inheritance hierarchies are considered different if they have at least one class that inherits a different list of classes.\n</p>\n\n<h3>Input</h3>\n<p>The first line of input contains a positive integer <b>T</b> - denoting the total number of testcases.</p>\n<p><b>T</b> lines follow - the <b>i<sup>th</sup></b> line contains a single positive integer <b>N</b>- denoting the number of classes written by Mr. Zourist.</p>\n<p></p>\n\n<h3>Output</h3>\n<p>For each testcase, print the required number of distinct class-inheritance hierarchies modulo <b>10<sup>9</sup> + 7</b> on a new line.</p>\n<p></p>\n\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>10<sup>5</sup></b></li>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>10<sup>5</sup></b></li>\n</ul>\n\n<h3>Example</h3>\n<b>Input</b><pre>\n2\n3\n6\n\n<b>Output</b>\n3\n9765\n</pre>\n\n<p></p>\n\n<h3>Explanation</h3>\n<p><b>Explanation for testcase 1:</b></p>\n<p>Let \"class X\" denote that X does not inherit any class</p>\n<p>Let \"class X(Y)\" denote that X inherits Y</p>\n<p>Let \"class X(Y, Z)\" denote that X inherits Y, Z</p>\n<p></p>\n<p><b>First possibility:</b>\n<pre>\nclass 2\nclass 3\nclass 1(2, 3)\n</pre>\n</p>\n\n<p><b>Second possibility:</b>\n<pre>\nclass 3\nclass 1(2)\nclass 2(3)\n</pre>\n</p>\n\n<p><b>Third possibility:</b>\n<pre>\nclass 3\nclass 1(2, 3)\nclass 2(3)\n</pre>\n</p>\n<p>These are the three valid class-inheritance hierarchies, and hence the answer is 3.</p>\n<p>\n    Note that the following hierarchy is not valid:\n    <pre>\n        class 1(2)\n        class 2\n        class 3\n    </pre>\n    This is because 3 should have been an ancestor of 1, but in the above hierarchy, 3 is a stand-alone class.\n</p>",
    "category_name": "main",
    "date_added": "25-11-2017",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "max_timelimit": "1",
    "problem_status": "unattempted",
    "editorial_url": "https://discuss.codechef.com/problems/MRO",
    "problem_tester": null,
    "time": {
        "view_start_date": 1515177000,
        "end_date": 1515357000,
        "practice_submission_allowed": true,
        "visible_start_date": 1826238052,
        "submit_start_date": 1515177000,
        "current": 1537433220
    },
    "user": {
        "username": ""
    }
}