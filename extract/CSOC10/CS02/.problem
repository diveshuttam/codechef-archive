{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>Problem text...\nWhen binary message are transmitted from one machine to another, there is a\nchance that some of bits are erroneously changed in transit. In order for the\nreceiving machine to detect whether an error has occurred, (1) the transmitting\nmachine sends a certified message consisting of the original message concatenated\nwith some redundant bits functionally derived from the message, and (2) the\nreceiving machine concludes no errors occurred after re-computing the redundant\nbits and finding them equal to those at the end of the certified message. In this\nproblem, you will implement the receiving machine's cyclic redundancy code (CRC)\nchecking algorithm.\nThe computation of the receiving machine can be defined mathematically. Let x be a\nfixed binary string called a generator of length two or more (used in the transmitting\nmachine's redundant bit calculation) . Let m be a binary string called a certified\nmessage such that |x| &lt; |m|.\nLet r0, r1, r2\u2026 r|m|-|x|+1 be the sequence of binary strings called residues defined by\nr0 = m[1..|x|-1],\nri=((ri-1.m[|x|-1+i])+x)[2..|x|]; if ri-1[1]=1;\nri=(ri-1.m[|x|-1+i])[2..|x|]; if ri-1[1]=0;\nThe receiving machine concludes no error occurred if the final residue r|m|-|x|+1 is\nall zeros.\n<h3>Input</h3>\n</p><p>Input description...\nThe first line of the input contains the generator x. The subsequent lines of input\neach contain a certified message m.\n<h3>Output</h3>\n</p><p>Output description...\nFor each certified message m in the input, use the cyclic redundancy check algorithm\nof the receiving machine to conclude whether an error occurred in transmission of\nthe certified message, and output the final residue r|m|-|x|+1.\n<h3>Example</h3>\n\n<pre>\n<b>Input:</b>\n10011\n11010110111110\n01101110000101\n10011010010011\n10010110111001\n11101011110100\n\n<b>Output:</b>\nOk : 0000\nOk : 0000\nError : 1011\nError : 1000\nOk : 0000\n</pre></p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "14-02-2010",
    "is_direct_submittable": false,
    "contest_name": "Code Spaghetti",
    "languages_supported": "C",
    "todo": false,
    "time": {
        "view_start_date": 1266690600,
        "end_date": 1266777000,
        "practice_submission_allowed": true,
        "visible_start_date": 1654180174,
        "submit_start_date": 1266690600,
        "current": 1537439725
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #1E7D22;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>2&#9733;</span><span>rushikesh30</span>",
    "problem_name": "CRC",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/rushikesh30'>rushikesh30</a>",
    "problem_tester_html_handle": "",
    "problem_author": "rushikesh30",
    "contest_code": "CSOC10",
    "max_timelimit": "1.65",
    "problem_code": "CS02"
}