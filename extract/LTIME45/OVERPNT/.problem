{
    "problem_code": "OVERPNT",
    "problem_author": "errichto",
    "contest_name": "February Lunchtime 2017",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>errichto</span>",
    "problem_name": "Bear and Oveflow Points",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>errichto</span>",
    "contest_code": "LTIME45",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/errichto'>errichto</a>, <a class='problem-tag-small ' href='/tags/problems/ltime45'>ltime45</a>, <a class='problem-tag-small ' href='/tags/problems/medium-hard'>medium-hard</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/LTIME45/mandarin/OVERPNT\n.pdf\">Mandarin Chinese</a>, <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/LTIME45/russian/OVERPNT\n.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/LTIME45/vietnamese/OVERPNT\n.pdf\">Vietnamese</a> as well.</h3>\n\n<p>In competitive programming, one of the common mistakes is using a variable type that stores too few bits, which leads to overflows and underflows.\nWe will focus on the \"unsigned int\" type, which makes all calculations modulo 2<sup>32</sup>, always giving a non-negative result between 0 and 2<sup>32</sup> - 1, inclusive.\nSample calculations on type \"unsigned int\" are:</p>\n\n<pre>7 - 5 = 2,        5 - 7 = 4294967294,        5 * 1,000,000,000 = 705032704</pre>\n<br>\n<p>Limak wants to become a great coder.\nRight now he learns the computional geometry.\nHe already knows that three points (ax, ay), (bx, by), (cx, cy) are collinear if and only if:</p>\n\n<p>(bx - ax) * (cy - ay) = (by - ay) * (cx - ax)</p>\n\n<p>Without thinking which type to use, Limak wrote the following C++ function:</p>\n\n<pre>\n<code>\n\ttypedef unsigned int UI;\n\tbool areCollinear(UI ax, UI ay, UI bx, UI by, UI cx, UI cy) {\n\t\treturn (bx - ax) * (cy - ay) == (by - ay) * (cx - ax);\n\t}\n</code>\n</pre>\n<br>\n\n<p>If you are more familiar with Python, you can assume that he wrote:</p>\n\n<pre>\n<code>\n    M = 2 ** 32\n    def subtract(a, b):\n        ans = a - b\n        if ans < 0:\n            ans += M\n        return ans\n    def mul(a, b):\n        return a * b % M\n    def areCollinear(ax, ay, bx, by, cx, cy):\n        return mul(sub(bx, ax), sub(cy, ay)) == mul(sub(by, ay), sub(cx, ax))\n</pre>\n</code>\n<br>\n\n<p>To show Limak how important it is to watch for overflows, you must find any set of <b>N</b> distinct points that:</b>\n\n<ul>\n<li>Any three distinct points in any order would be treated as collinear by Limak's function.</li>\n<li>None three points are collinear (what implies that points are distinct).</li>\n<li>Coordinates are non-negative integers not exceeding 10<sup>6</sup>.</li>\n</ul>\n\n<br>\n\n<p>If there are many solutions (valid sets of points), you can print any of them.\nThere exists at least one solution for every <b>N</b> allowed by the constraints.</p>\n\n\n\n\n\n\n\n<h3>Input</h3>\n\n<p>The only line of the input contains an integer <b>N</b> denoting the required number of points.</p>\n\n<h3>Output</h3>\n\n<p>Print <b>N</b> lines.\nThe i-th of them should contain two space-separated integers x<sub>i</sub> and y<sub>i</sub>, denoting coordinates of the i-th point.\nIf there are many solutions, you can print any of them.</p>\n\n<p>Remember that one of requirements is 0 \u2264 x<sub>i</sub>, y<sub>i</sub> \u2264 10<sup>6</sup>.</p>\n\n\n\n<h3>Constraints</h3>\n\n<ul>\n<li>3 \u2264 <b>N</b> \u2264 10</li>\n</ul>\n\n<h3>Subtasks</h3>\n\n<ul>\n<li>Subtask #1 (50 points) 3 \u2264 <b>N</b> \u2264 5</li>\n<li>Subtask #2 (50 points) original constraints</li>\n</ul>\n\n\n\n<h3>Example</h3>\n\n<pre><b>Input1:</b>\n3\n\n<b>Output2:</b>\n106732 139820\n210379 490375\n42 483426\n\n<b>Input2:</b>\n4\n\n<b>Output2:</b>\n580981 431795\n914958 554338\n518360 23016\n441824 483616</pre>\n\n\n\n\n<h3>Explanation</h3>\n\n<p><b>Test case 1.</b> The provided function areCollinear() should return True for the found three points given in any order (there are 3! = 6 possible orders of 3 points).\nLet's analyze the evaluation of areCollinear(42, 483426, 106732, 139820, 210379, 490375):</p>\n\n<p>Without any overflow errors, the calculations would be:</p>\n\n<p> (bx - ax) * (cy - ay) = (106732 - 42) * (490375 - 483426) = 741388810</p>\n\n<p>(by - ay) * (cx - ax) = (139820 - 483426) * (210379 - 42) = -72273055222</p>\n\n<p>And indeed numbers 741388810 and -72273055222 are equal modulo 2<sup>32</sup>. Hence areCollinear would think that they are collinear.</p>",
    "category_name": "main",
    "date_added": "23-02-2017",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, PAS fpc, PAS gpc, RUBY, PHP, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "max_timelimit": "1",
    "problem_status": "unattempted",
    "editorial_url": "https://discuss.codechef.com/problems/OVERPNT",
    "problem_tester": "errichto",
    "time": {
        "view_start_date": 1488031500,
        "end_date": 1488042300,
        "practice_submission_allowed": true,
        "visible_start_date": 1488042300,
        "submit_start_date": 1488031500,
        "current": 1537434100
    },
    "user": {
        "username": ""
    }
}