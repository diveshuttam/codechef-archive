{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span>\n<p><b>Problem description.</b></p>\n<p> You are given two circles <b>C<sub>1</sub></b> and <b>C<sub>2</sub></b> with radius <b>R<sub>1</sub></b> and <b>R<sub>2</sub></b> respectively. It is given that <b>R<sub>1</sub></b> &lt; <b>R<sub>2</sub></b> and these two circles have exactly two intersection points say <b>P</b> and <b>P<sup>'</sup></b>. In the two points of intersection <b>P</b> has larger y-coordinate and in case both  <b>P</b> and <b>P<sup>'</sup></b> have same y-coordinate than <b>P</b> has larger x-coordinate. Now draw a circle <b>C<sub>3</sub></b> which touches <b>C<sub>1</sub></b> externally and <b>C<sub>2</sub></b> internally and have maximum radius over all such possible circles. Draw another circle <b>C<sub>4</sub></b> which touches <b>C<sub>1</sub></b> externally, <b>C<sub>2</sub></b> internally and <b>C<sub>3</sub></b> externally. There are exactly two such circles so choose the one whose center is farther from <b>P</b>. Similarly, draw circles <b>C</b><sub>i</sub>'s, such that <b>C</b><sub>i</sub> touches <b>C<sub>1</sub></b> externally, <b>C<sub>2</sub></b> internally and <b>C</b><sub>i-1</sub> externally. Only one such circle is possible for i>=4. Let <b>O</b><sub>i</sub> be the center of <b>C</b><sub>i</sub>. Suppose line <b>PO</b><sub>i</sub> cuts cirle <b>C</b><sub>i</sub> at <b>A</b><sub>i</sub>  and <b>B</b><sub>i</sub>. For each circle <b>C</b><sub>i</sub>, i>=3 , lets  us define Miraculous point <b>M</b><sub>i</sub>. ith Miraculous point <b>M</b><sub>i</sub>, is a point on line segment <b>PO</b><sub>i</sub> such that\n</p>\n<p>\ndistance(P,<b>M</b><sub>i</sub> ) = ( 2 * distance(P,<b>A</b><sub>i</sub>) * distance(P,<b>B</b><sub>i</sub> ) )/( distance(P,<b>A</b><sub>i</sub> )+ distance(P,<b>B</b><sub>i</sub> ) ) </p>\n<p>You would be asked <b>Q</b> queries. Each query is of the form <b>(i x y r)</b>. All you need to do is find a circle passing through <b>M</b><sub>i</sub>, <b>M</b><sub>i+1</sub> and <b>M</b><sub>i+2</sub> and find the number of points of intersection of this circle with the circle with center <b>(x,y)</b> and radius <b>r</b>. If there are exactly two points of intersection, print the coordinates in two different line in ascending order( first print the point whose x coordinate is lesser and if they are equal then print first print the point with lesser y coordinate). In all other cases print -1. If  points <b>M</b><sub>i</sub>, <b>M</b><sub>i+1</sub> and <b>M</b><sub>i+2</sub> are collinear then print -1. </p>\n<h3>Input</h3>\n<p>The first line of the input contains an integer <b>T</b> denoting the number of test cases. For each test case:</p>\n<ul>\n<li>First line contains three space separated floating numbers <b>x</b>, <b>y</b> and <b>r</b> denoting the coordinate of the center and radius for circle <b>C<sub>1</sub></b>.</li>\n<li>Second line contains three space separated floating numbers <b>x</b>, <b>y</b> and <b>r</b> denoting the coordinate of the center and radius for circle <b>C<sub>2</sub></b>.</li>\n<li>Third Line contains an interger <b>Q</b> denoting the number of queries. It would be followed by Q lines.</li>\n<li>Each line contains an 4 space separated numbers i, x, y, r . i  is an integer. x, y and r are floating point numbers.</li>\n</ul>\n\n<h3>Output</h3>\n<p>For each query:</p>\n<ul>\n<li>If  points <b>M</b><sub>i</sub>, <b>M</b><sub>i+1</sub> and <b>M</b><sub>i+2</sub> are collinear then print -1.\n</li><li>If there are exactly two points of intersection, print the coordinates in two different line in ascending order( first print the point whose x coordinate is lesser and if they are equal then print first print the point with lesser y coordinate).</li>\n<li>Otherwise print -1.</li>\n</ul>\n\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> &lt;= <b>T</b> &lt;= <b>50</b></li>\n<li><b>0</b> &lt;= <b>Q</b> &lt;= <b>1000</b></li>\n<li><b>3</b> &lt;= <b>i</b> &lt;= <b>2*10<sup>6</sup></b>\n</li>\n<li> all floating point numbers &lt;= 10<sup>8<sup>  </sup></sup></li>\n\n<li>Your output must be correct upto three places of decimal.</li>\n</ul>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n1\n0 0 1\n2 0 2\n2\n3 0 1 2\n3 0 5 1\n<br />\n<b>Output:</b>\n0.279423 -0.980384 1.720577 -0.019616\n-1\n</pre>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "12-03-2016",
    "is_direct_submittable": false,
    "contest_name": "IOPC 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1457789400,
        "end_date": 1457875800,
        "practice_submission_allowed": true,
        "visible_start_date": 1457875800,
        "submit_start_date": 1457789400,
        "current": 1537435151
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>shinigami_ryuk</span>",
    "problem_name": "Miraculous Circle",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/shinigami_ryuk'>shinigami_ryuk</a>",
    "problem_tester_html_handle": "",
    "problem_author": "shinigami_ryuk",
    "contest_code": "IOPC2016",
    "max_timelimit": "1",
    "problem_code": "IOPC16B"
}