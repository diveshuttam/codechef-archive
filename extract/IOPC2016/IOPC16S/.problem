{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\u00a0</p>\n<p>Problem description.</p>\n<p>Each Justice Leaguer has some power, a number representing his strength. Every member can call some other members for help. The call for help can be cascaded. For example, x can call y and then, y can call z. The reach of a member is defined as the sum of the powers of all the members that can be called to help. Given the list of which members can call which members to help, estimate which member can assemble largest aggregate of powers.\n</p>\n<h3>Input</h3>\n<p>The first line contains 2 integers - the number of members, n and the number of helper relations, m.\n</p>\n<ul>\n<li>The second line contains n integers, the ith integer A_i, representing the power of the ith member.\n</li>\n<li>The next m line contains 2 integers, u and v, denoting that u can call on v to help.\n</li>\n</ul>\n<h3>Output</h3>\n<p>Output exactly one integer denoting the member's number who can assemble largest aggregate of powers.\n</p>\n<h3>Constraints</h3>\n<ul>\n<li>n&lt;=10^5\n</li>\n<li>m&lt;=2*10^5\n</li>\n<li>0&lt;=A_i&lt;=100\n</li>\n<li>1&lt;=u,v&lt;=n\n</li>\n<li>No member can call on himself for help, directly or indirectly\n</li>\n</ul>\n<h3>Scoring</h3>\n<p>Let the aggregate of powers of members that your given Justice Leaguer can assemble be x and y be the sum of powers of all the members in that particular test file. Your score for that particular test file is then (x/y). Total score is sum of scores over all test files.\n</p>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "12-03-2016",
    "is_direct_submittable": false,
    "contest_name": "IOPC 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1457789400,
        "end_date": 1457875800,
        "practice_submission_allowed": true,
        "visible_start_date": 1457875800,
        "submit_start_date": 1457789400,
        "current": 1537435154
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>shinigami_ryuk</span>",
    "problem_name": "SuperFriends",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/shinigami_ryuk'>shinigami_ryuk</a>",
    "problem_tester_html_handle": "",
    "problem_author": "shinigami_ryuk",
    "contest_code": "IOPC2016",
    "max_timelimit": "0.5",
    "problem_code": "IOPC16S"
}