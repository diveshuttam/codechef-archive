{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span>$K$ friends are going to watch a newly realeased movie $Miramar$ : $The$ $Snipers$ $Zone$ and they are booking tickets online.    \nThe theatre consists of $N$ rows of seats and each row contains $M$ seats where $M$ is odd.    \nThe rows are labelled as A B C ... Z  ($N$<=26) where row A is nearest to the movie screen.    \nThe seats in any row are labelled as 1 2 3 ... $M$.    \n    \nWell, they have three conditions to select the $K$ tickets from any row.    \n1) All the seats should be contiguous.    \n2) All the seats should be in the farthest possible row from the movie screen.    \n3) All the seat numbers should be in the inclusive range of given $L$ and $R$.    \n    \nFor the farthest row satisfying above three conditions, you have to select $K$ closest possible seats from the center seat of that row.    \n\nIf multiple closest possible selections are present in a row, choose the leftmost contiguous set of seats among all possible sets. i.e. Sum of the seat numbers should be minimum. (Refer explanation of Test Case 2 for clarity).\n    \nData of available seats is given to you in the form of $N$ x $M$ matrix of integers where $1$ indicates seat is booked and $0$ indicates seat is available.    \n\nYou have to tell which row they should book along with the seat numbers such that all conditions are satisfied.\nPrint $-1$ if it is impossible.    \n    \n$Note$:     \nCenter Seat of all N rows is always booked.    \n\n###Input:\n\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.    \n- The first line of each test case contains three space-separated integers $N$, $M$ and $K$.    \n- The second line of each test case contains two space-separated integers $L$ and $R$.    \n- Next $N$ Lines contains $M$ space-separated integers either $0$ or $1$ which represents availability of seats from nearest row to the farthest row of the movie screen.\n\n###Output:    \nFor each test case, print a single line containing one character \u2014 the label of selected row followed by $K$ space-separated integers - the seat numbers in selected row.\nIf seat selection is impossible print a single integer $-1$.\n\n###Constraints\n- $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 26$    \n- $1 \\leq M \\leq 10^3$    \n- $1 \\leq K \\leq M$\n- $1 \\leq L \\leq M$\n- $1 \\leq R \\leq M$    \n- Center Seat of all $N$ rows is always booked.\n\n###Sample Input:\n2    \n5 5 2        \n1 4        \n1 1 1 0 1     \n0 0 1 1 1     \n1 0 1 0 1      \n0 0 1 1 1        \n1 0 1 0 0               \n4 11 2          \n2 10     \n1 0 1 1 0 1 0 0 1 0 1    \n0 0 0 0 0 1 0 0 0 0 0      \n1 1 0 0 0 1 0 0 0 1 1        \n0 1 0 1 0 1 0 1 1 0 0      \n\n###Sample Output:\nD 1 2    \nC 4 5\n    \n###EXPLANATION:\nTest Case 1 :    \n     \n![Alt text](https://drive.google.com/uc?export=download&id=1PpUzFHYbfLFU8N0mO7MJgOBIn0CnxdBD)    \n    \nThis is the given seat availability. Valid rows to select seats are B and D. Out of these D is the farthest row from the screen. Therefore we select D 1 2 as shown below :      \n\n![Alt text](https://drive.google.com/uc?export=download&id=1zv7QBZt4l7X24LbHIr9K-65vyjxyzTcq)    \n\n\nTest Case 2 :\n\n![Alt text](https://drive.google.com/uc?export=download&id=1ee2FN1IrLF8inydcoLdG60BQ7FHGyw_c)     \n\nValid rows to select seats are A, B and C. C is the farthest row. In row C, Contiguous and closest possible seats from the centre are {4,5} and {7,8}. Out of these two possible sets of 2 seats each, we select {4,5} because sum of seat numbers should be minimum if multiple closest possible selections from centre are present in a row i.e. Here, (4+5) < (7+8). Therefore we select C 4 5 as shown below :    \n\n![Alt text](https://drive.google.com/uc?export=download&id=1csgaOu9G1bSjT6jfAdJusSUwcVwSobkr)",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "27-07-2018",
    "is_direct_submittable": false,
    "contest_name": "CodeFusion 19.2",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "todo": false,
    "time": {
        "view_start_date": 1533398400,
        "end_date": 1533412800,
        "practice_submission_allowed": true,
        "visible_start_date": 1533412800,
        "submit_start_date": 1533398400,
        "current": 1537432199
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;</span><span>iamrohitrc</span>",
    "problem_name": "BOOK MY SHOW",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/iamrohitrc'>iamrohitrc</a>",
    "problem_tester_html_handle": "",
    "problem_author": "iamrohitrc",
    "contest_code": "CF22018",
    "max_timelimit": "1",
    "problem_code": "CF1924"
}