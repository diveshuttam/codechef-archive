{
    "problem_code": "LUCKYSWP",
    "problem_author": "witua",
    "contest_name": "May Cook-Off 2012",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;</span><span>witua</span>",
    "problem_name": "Little Elephant and Swapping",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>anton_lunyov</span>",
    "contest_code": "COOK22",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/cook22'>cook22</a>, <a class='problem-tag-small ' href='/tags/problems/medium'>medium</a>, <a class='problem-tag-small ' href='/tags/problems/witua'>witua</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>A Little Elephant from the Zoo of Lviv likes <i>lucky strings</i>, i.e., the strings that consist only of the lucky digits <b>4</b> and <b>7</b>.</p>\n\nHe is now studying some special transformation defined on the set of the lucky strings. The lucky string <b>T</b> is called a <i>swap permutation</i> of the lucky string <b>S</b> with <b>|S| = N</b> if it can be derived from <b>S</b> by the following process.\n<ul>\n<li> Choose some integers <b>L</b> and <b>R</b> such that <b>1 \u2264 L \u2264 R \u2264 N</b>.\n</li><li> Denote by <b>A</b> the substring <b>S[L, R]</b> and by <b>B</b> the concatenation <b>S[1, L - 1] + S[R + 1, N]</b>.\n</li><li> Choose some integer <b>K</b> such that <b>0 \u2264 K \u2264 |B|</b>.\n</li><li> Put <b>T = B[1, K] + A + B[K + 1, |B|]</b>.\n</li></ul>\n<br />\n\n<p>In other words, <b>T</b> is a swap permutation of <b>S</b> if it can be obtained from <b>S</b> by deleting some non-empty substring from <b>S</b> and then inserting it back into any position of <b>S</b>. Note that <b>S</b> is always a swap permutation of itself.</p>\n\n<p>Denote by <b>F(S)</b> the length of the longest non-decreasing subsequence of <b>S</b>. In other words, this subsequence should have one of the following forms: <b>444...444</b>, <b>777...777</b>, <b>444...444777...777</b>.</p>\n\n<p> The Little Elephant has the lucky string <b>S</b> and as an experienced theoretical scientist he is interested in some quite theoretical problem. Namely, he wants to find the maximal value of <b>F(T)</b> if <b>T</b> can be an arbitrary swap permutation of <b>S</b>. Help him and find this value.</p>\n\n<p><b>Notes.</b></p>\n\nLet <b>S</b> be some lucky string. Then\n\n<ul>\n\n<li><b>|S|</b> denotes the length of the string <b>S</b>;\n\n</li><li><b>S[i]</b> (<b>1 \u2264 i \u2264 |S|</b>) denotes the <b>i</b><sup>th</sup> character of <b>S</b> (the numeration of characters starts from <b>1</b>);\n\n</li><li> <b>S[L, R]</b> (<b>1 \u2264 L \u2264 R \u2264 |S|</b>) denotes the string with the following sequence of characters: <b>S[L], S[L + 1], ..., S[R]</b>, and is called a <i>substring</i> of <b>S</b>. For <b>L &gt; R</b> we mean by <b>S[L, R]</b> an empty string.\n\n</li></ul>\n<br />\n\n<p>For any two lucky strings <b>S</b> and <b>T</b> their <i>concatenation</i> is defined as the sequence of characters in <b>S</b> followed by the sequence of characters in <b>T</b>, and is denoted by <b>S + T</b>.</p>\n\n<p>The string <b>T</b> is called a <i>subsequence</i> of the string <b>S</b> if <b>T</b> can be derived from <b>S</b> by deleting some (possibly zero) number of characters without changing the order of the remaining characters. For example, <b>T = 474</b> is a subsequence of <b>S = 74477747</b> since after deleting characters at positions <b>1, 2, 5, 6, 8</b> from <b>S</b> we obtain <b>T</b>. Note that, the empty string and the string <b>S</b> itself are always the subsequences of <b>S</b>.</p>\n\n\n<h3>Input</h3>\n<p>The first line of the input file contains a single integer <b>T</b>, the number of test cases. Each of the following <b>T</b> lines contains one string, the string <b>S</b> for the corresponding test case. The input file does not contain any whitespaces.</p>\n\n<h3>Output</h3>\n<p>For each test case, output a single line containing the answer for this test case, that is, <b>max{F(T) : T is a swap permutation of S}</b>.</p>\n\n<h3>Constraints</h3>\n<p> 1 \u2264 <b>T</b> \u2264 10</p>\n<p> 1 \u2264 <b>|S|</b> \u2264 100000</p>\n<p> <b>S</b> consists only of the lucky digits <b>4</b> and <b>7</b>.</p>\n\n<h3>Example</h3>\n\n<pre>\n<b>Input:</b>\n5\n7474\n47\n47744\n7744\n474747447444474\n\n<b>Output:</b>\n3\n2\n5\n4\n11\n\n</pre>\n\n<h3>Explanation</h3>\n<p>In the first test case all different swap permutations of <b>S = 7474</b> are <b>4747, 4774, 7447, 7474, 7744</b>. Corresponding values of <b>F(T)</b> are <b>3, 3, 3, 2, 2</b>. Hence the answer is <b>3</b>.</p>\n\n<p>In the second, third and fourth test cases there exists a non-decreasing swap permutation and hence the answer is equal to the length of the string. Namely, <b>S = 47</b> is itself non-decreasing, for <b>S = 47744</b> we can obtain the non-decreasing <b>T = 44477</b> if we delete the substring <b>S[2,3] = 77</b> and then insert it back into the end of the string, finally, for <b>S = 7744</b> we can obtain the non-decreasing <b>T = 4477</b> if we delete the substring <b>S[1,2] = 77</b> and then insert it back into the end of the string.</p>",
    "category_name": "main",
    "date_added": "1-03-2012",
    "status": "success",
    "languages_supported": "C, JAVA, PYTH, PYTH 3.6, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, CLOJ, FS",
    "max_timelimit": "0.233169",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/LUCKYSWP",
    "problem_tester": "anton_lunyov",
    "time": {
        "view_start_date": 1337529600,
        "end_date": 1337539200,
        "practice_submission_allowed": true,
        "visible_start_date": 1337539200,
        "submit_start_date": 1337529600,
        "current": 1537438801
    },
    "user": {
        "username": ""
    }
}