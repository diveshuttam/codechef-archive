{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL16/mandarin/BIGTREE.pdf\">Mandarin Chinese</a>, <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL16/russian/BIGTREE.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL16/vietnamese/BIGTREE.pdf\">Vietnamese</a> as well.</h3>\n<p>There are all kinds of trees in Chef's garden. There are black sapote trees. There are big santol trees. And of course, there are binary search trees.</p>\n<p>Chef's <b>binary search trees</b> are grown in a very specific way. Binary search trees are grown by inserting <b>nodes</b> into it. The first inserted node is called the <b>root</b>. Unlike most of Chef's other trees, binary search trees are grown downwards, and the root is at the top of the tree.</p>\n<p>Each node is connected by <b>edges</b> to at most two other nodes below it, called its <b>left child</b> and <b>right child</b>. These can be \"null\", meaning there are no such children. Finally, each node also has a number on it, called its <b>label</b>.</p>\n<p>To grow a binary search tree, you insert a new node to it. The exact rules for inserting a new node are specified by the following pseudocode:</p>\n<pre><code>def insert(x, y)\n    if x == null\n        return y\n\n    if y.label &lt; x.label\n        x.left  = insert(x.left,  y)\n    else\n        x.right = insert(x.right, y)\n\n    return x\n</code></pre><p>To insert a new node <rr>y</rr> to the tree with root <tt>x</tt>, simply call <tt>insert(x, y)</tt>. The value returned is the root of the new tree.</p>\n<p>The following is an example of a binary search tree:</p>\n<!-- TODO image --><!-- TODO image --><pre><code>  3\n / \\\n1   5\n     \\\n      7\n</code></pre><p>The root of this tree has label <b>3</b>.</p>\n<p>After inserting a new node with a label of <b>3</b>, the binary search tree becomes:</p>\n<!-- TODO image --><!-- TODO image --><pre><code>  3\n / \\\n1   5\n   / \\\n  3   7\n</code></pre><p>The <b>depth</b> of a node is the number of edges in the path from that node to the root. For example, the node with label <b>7</b> above has a depth of <b>2</b>, while the node with label <b>1</b> has a depth of <b>1</b>.</p>\n<p>Chef has a total of <b>T</b> binary search trees in his garden. Each tree has four numbers associated with it: <b>a</b>, <b>b</b>, <b>m</b> and <b>N</b>. This means that the tree has a total of <b>N</b> nodes, and the <b>k<sup>th</sup></b> inserted node has label <b>(a + bk) mod m</b>. So the root, being the first inserted node, has label <b>(a + b) mod m</b>.</p>\n<p>For each of Chef's binary search trees, can you determine the depth of the node that was inserted last?</p>\n<h3>Input</h3>\n<p>The first line of the input contains an integer <b>T</b> denoting the number of trees. The description of <b>T</b> trees follows.</p>\n<p>Each test case consists of a single line containing four space separated integers <b>a</b>, <b>b</b>, <b>m</b> and <b>N</b>.</p>\n<h3>Output</h3>\n<p>For each test case, output a single line containing a single integer, denoting the depth of the node that was inserted last in the binary search tree.</p>\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>5\u00d710<sup>4</sup></b></li>\n<li><b>1</b> \u2264 <b>N</b> \u2264 <b>10<sup>16</sup></b></li>\n<li><b>0</b> \u2264 <b>a</b>, <b>b</b> &lt; <b>m</b> \u2264 <b>10<sup>8</sup></b></li>\n</ul>\n<h3>Example</h3>\n<pre><b>Input:</b>\n<tt>5\n1 2 8 1\n1 2 8 2\n1 2 8 3\n1 2 8 4\n1 2 8 5\n</tt>\n<b>Output:</b>\n<tt>0\n1\n2\n1\n2</tt>\n</pre><h3>Explanation</h3>\n<p>The sample input is illustrated by the image above.</p>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "7-06-2016",
    "is_direct_submittable": false,
    "contest_name": "SnackDown 2016 Onsite Final Mirror",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1468047000,
        "end_date": 1468065000,
        "practice_submission_allowed": true,
        "visible_start_date": 1468065000,
        "submit_start_date": 1468047000,
        "current": 1537434781
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #D0011B;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>7&#9733;</span><span>kevinsogo</span>",
    "problem_name": "Big Search Trees",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/kevinsogo'>kevinsogo</a>",
    "problem_tester_html_handle": "",
    "problem_author": "kevinsogo",
    "contest_code": "SNFL16MR",
    "max_timelimit": "2",
    "problem_code": "BIGTREE"
}