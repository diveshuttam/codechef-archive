{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p align=\"justify\">\nGelsinger and Meyer are two chip designers, more than any others, have made an impact on the pc world and neither of them is named Moore. They are upto to design a new processor which will be more efficient than any processor available for home users in terms of speed and power. But their prime focus is on making register allocation process more optimized which is also known as compiler optimization process.\n</p>\n<p align=\"justify\">\nPrograms can be further optimized by assigning the same register to a source and destination of a move instruction whenever possible. This is especially important if the compiler is using other optimizations such as SSA analysis, which artificially generates additional move instructions in the intermediate code.Through liveness analysis, compilers can determine which sets of variables are live at the same time, as well as variables which are involved in move instructions. Using this information, the compiler can construct a graph such that every vertex represents a unique variable in the program. Interference edges connect pairs of vertices which are live at the same time, and preference edges connect pairs of vertices which are involved in move instructions.\n</p>\n<p align=\"justify\">\nIn many programming languages, the programmer has the illusion of allocating arbitrarily many variables. However, during compilation, the compiler must decide how to allocate these variables to a small, finite set of registers. Not all variables are in use (or \"live\") at the same time, so some registers may be assigned to more than one variable. However, two variables in use at the same time cannot be assigned to the same register without corrupting its value. Variables which cannot be assigned to some register must be kept in RAM and loaded in/out for every read/write, a process called spilling. Accessing RAM is significantly slower than accessing registers and slows down the execution speed of the compiled program, so an optimizing compiler aims to assign as many variables to registers as possible.\n</p>\n<p align=\"justify\">\nHelp Gelsinger and Meyer to design such chip keeping in mind that every unique variable must be assigned different register so that different variable may not access and change the common resource at the same time violating the propertis like mutual exclusion, bounded waiting.\n</p>\n<h3>Input</h3>\n<p align=\"justify\">\nFirst line contains <b>T</b> number of test cases. First line of each test contains three space-separated integer <b>V</b> number of variables, <b>K</b> number of pairs of source and destination of a move instruction and <b>R</b> is the number of registers available, following each <b>K</b> line contains a pair of integers <b>Si</b> and <b>Di</b>.\n</p>\n<h3>Output</h3>\n<p>\nOutput for every test case whether it is possible to allocate <b>R</b> registers to <b>V</b> variables if it is possible output \"YES\" else \"NO\" on a line.\n</p>\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>1000</b></li>\n<li><b>1</b> \u2264 <b>V</b> \u2264 <b>10^5</b></li>\n<li><b>1</b> \u2264 <b>K</b> \u2264 <b>V*(V-1)/2</b></li>\n<li><b>1</b> \u2264 <b>R</b> \u2264 <b>V</b></li>\n<li><b>1</b> \u2264 <b>Si</b>,<b>Di</b> \u2264 <b>V</b></li>\n</ul>\n<p>\u00a0</p>\n<h3>Example</h3>\n<pre><b>Input:</b>\n2\n5 6 4\n1 2\n1 3\n2 3\n2 4\n3 4\n4 5\n4 6 3\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n<b>Output:</b>\nYES\nNO\n</pre>\n<h3>Explanation</h3>\n<p><b>Example case 1.</b> Variable 1 and 4 can be allocated register 1, similarly for variable 2,3 and 5 register 2,3,5 can be allocated so total number of register required is equal(smaller is also acceptable) to number of registers provided. Hence answer is YES</p>.",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "13-03-2017",
    "is_direct_submittable": false,
    "contest_name": "Codiyapa",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6",
    "todo": false,
    "time": {
        "view_start_date": 1489829400,
        "end_date": 1489915800,
        "practice_submission_allowed": true,
        "visible_start_date": 1489915800,
        "submit_start_date": 1489829400,
        "current": 1537434001
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #666666;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>1&#9733;</span><span>rohit74</span>",
    "problem_name": "Gelsinger And Meyer",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/rohit74'>rohit74</a>",
    "problem_tester_html_handle": "",
    "problem_author": "rohit74",
    "contest_code": "PRCD1701",
    "max_timelimit": "1",
    "problem_code": "COD72017"
}