{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>\nAlice and Bob are tired of playing with messages and proving things which the lazy cryptographers should be doing on their own. So they've decided to take the day off, and have come to the beach. Alice soon spots a dirty glass bottle floating in the water, and they find an ancient parchment inside it. On it, is drawn an undirected graph! As luck would have it, they find some colored clam shells lying around. There are red, blue and green ones. And as usual, Alice devises some devious game and challenges Bob to play it.\n</p>\n\n<p>\nShe marks the vertices as <b>V<sub>1</sub>, V<sub>2</sub>, .., V<sub>N</sub></b>. She then places some clams on each of the vertices. There are <b>R<sub>1</sub></b> red clams on <b>V<sub>1</sub>, R<sub>2</sub></b> red clams on <b>V<sub>2</sub>, .., R<sub>N</sub></b> red clams on <b>V<sub>N</sub></b>. Similarly there are <b>B<sub>i</sub></b> blue clams on <b>V<sub>i</sub></b>, for every <b>i</b>, and <b>G<sub>i</sub></b> green clams on <b>V<sub>i</sub></b> for every <b>i</b>. She tells Bob that he has to take every single clam and do one of two things: Suppose the clam was on <b>V<sub>i</sub></b> originally. He should either leave it at <b>V<sub>i</sub></b> itself. Or move it along an edge incident on <b>V<sub>i</sub></b>, and place it on a neighbouring vertex. He can do this atmost once, for every clam. \n</p>\n\n<p>\nSuppose he does so for every clam, and finally ends up with a configuration, where there are <b>R<sub>1</sub>'</b> red clams on <b>V<sub>1</sub>, R<sub>2</sub>'</b> red clams on <b>V<sub>2</sub>, .., R<sub>N</sub>'</b> red clams on <b>V<sub>N</sub></b>. Similarly there are <b>B<sub>i</sub>'</b> blue clams on <b>V<sub>i</sub></b>, for every <b>i</b>, and <b>G<sub>i</sub>'</b> green clams on <b>V<sub>i</sub></b> for every <b>i</b>.\n</p>\n\n<p>\nShe then gives him a sequence of numbers: <b>T<sub>1</sub>, T<sub>2</sub>, .., T<sub>N</sub></b>, and tells him that, at the end, <b>V<sub>i</sub></b> should have a total of exactly <b>T<sub>i</sub></b> clams. That is, <b>R<sub>i</sub>' + B<sub>i</sub>' + G<sub>i</sub>'</b> should be equal to <b>T<sub>i</sub></b>.\n</p>\n\n<p>\nShe gives him another sequence of numbers: <b>MinG<sub>1</sub>, MinG<sub>2</sub>, .., MinG<sub>N</sub></b>, and tells him that there should be at least <b>MinG<sub>i</sub></b> green clams on <b>V<sub>i</sub></b>. ie. <b>G<sub>i</sub>'</b> should be greater than or equal to <b>MinG<sub>i</sub></b>.\n</p>\n\n<p>\nShe also gives him an integer <b>K</b>, and Bob has to ensure that the total number of red clams which end up on even-indexed vertices is at least <b>K</b>. <b>V<sub>2i</sub></b> is an even-indexed vertex, for all <b>i</b>. <b>V<sub>2i+1</sub></b> is an odd-indexed vertex, for all <b>i</b>. That is, <b>R<sub>2</sub>' + R<sub>4</sub>' + .. + R<sub>2i</sub>' + ..</b> should be greater than or equal to <b>K</b>.\n</p>\n\n<p>\nBob is lazy as usual and doesn't want to spend time trying, unless he knows for sure that this is achievable. Help him by figuring it out for him. Output <b>1</b> if he can satisfy all of Alice's conditions. Output <b>0</b> otherwise.\n</p>\n\n<h3>Input</h3>\n<p>The first line of input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.</p>\n<p>The first line contains two integers <b>N</b> and <b>M</b>, denoting the number of vertices, and number of edges in the graph, respectively.</p>\n<p>The next <b>M</b> lines contain two integers each, separated by single spaces: <b>i j</b>, denoting that there is an edge between <b>V<sub>i</sub></b> and <b>V<sub>j</sub></b>.\nIt is guaranteed that there is atmost 1 edge between any two vertices, and there is no edge which connects a vertex to itself.</p>\n\n<p>The next line contain <b>N</b> integers, separated by single spaces: <b>R<sub>1</sub>, R<sub>2</sub>, .., R<sub>N</sub></b>, denoting the number of red clams in each vertex originally.</p>\n<p>The next line contain <b>N</b> integers, separated by single spaces: <b>B<sub>1</sub>, B<sub>2</sub>, .., B<sub>N</sub></b>, denoting the number of blue clams in each vertex originally.</p>\n<p>The next line contain <b>N</b> integers, separated by single spaces: <b>G<sub>1</sub>, G<sub>2</sub>, .., G<sub>N</sub></b>, denoting the number of green clams in each vertex originally.</p>\n<p>The next line contain <b>N</b> integers, separated by single spaces: <b>T<sub>1</sub>, T<sub>2</sub>, .., T<sub>N</sub></b>, denoting the total number of clams that Alice wants Bob to place in each vertex finally.</p>\n<p>The next line contain <b>N</b> integers, separated by single spaces: <b>MinG<sub>1</sub>, MinG<sub>2</sub>, .., MinG<sub>N</sub></b>, denoting the minimum number of green clams that Alice wants Bob to place in each vertex finally.</p>\n<p>The last line contains a single integer <b>K</b>, denoting the minimum number of red clams that Alice wants Bob to place in even-indexed vertices finally.</p>\n\n\n\n<h3>Output</h3>\n<p>Output a single line for each testcase, containing the answer, which should be a <b>0</b> or a <b>1</b>.</p>\n\n\n<h3>Constraints</h3>\n\n<ul>\n<li><b>1 \u2264 T \u2264 3</b></li>\n<li><b>1 \u2264 N \u2264 100</b></li>\n<li><b>0 \u2264 M \u2264 1000</b></li>\n<li><b>0 \u2264 R<sub>i</sub>, B<sub>i</sub>, G<sub>i</sub> \u2264 100</b></li>\n<li><b>0 \u2264 T<sub>i</sub>, MinG<sub>i</sub>, K \u2264 3*10<sup>4</sup></b></li>\n</ul>\n\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n<tt>1\n4 4\n1 2\n2 3\n3 1\n4 3\n2 0 1 2\n0 1 1 2\n1 3 1 3\n1 3 8 5\n0 0 7 0\n5\n</tt>\n<b>Output:</b>\n<tt>1</tt>\n</pre>\n\n<h3>Explanation</h3>\nBob does these actions:\n<li>Moves both the red clams from <b>V<sub>1</sub></b> to <b>V<sub>2</sub></b>.</li>\n<li>Moves all the three green clams from <b>V<sub>2</sub></b> to <b>V<sub>3</sub></b>.</li>\n<li>Moves the red clam from <b>V<sub>3</sub></b> to <b>V<sub>4</sub></b>.</li>\n<li>Moves all the three green clams from <b>V<sub>4</sub></b> to <b>V<sub>3</sub></b>.</li>\n\n<p>\nOnce these are done, we see that all of Alice's conditions are met:\n<li>The total number of clams in <b>V<sub>1</sub></b>, <b>V<sub>2</sub></b>, .. <b>V<sub>4</sub></b> is (1, 3, 8, 5). We see that each element here is exactly equal to the corresponding element in <b>T<sub>1</sub>, T<sub>2</sub>, .., T<sub>4</sub></b>, which is (1, 3, 8, 5).\n</li>\n\n<li>The number of green clams in <b>V<sub>1</sub></b>, <b>V<sub>2</sub></b>, .. <b>V<sub>4</sub></b> is (1, 0, 7, 0). We see that each element here is greater than or equal to the corresponding element in <b>MinG<sub>1</sub>, MinG<sub>2</sub>, .., MinG<sub>4</sub></b>, which is (0, 0, 7, 0).\n</li>\n\n<li>There are 2 red clams in <b>V<sub>2</sub></b> and 3 red clams in <b>V<sub>4</sub></b>. Hence, there are at least K=5 red clams in even-indexed vertices.\n</li>\n</p>\n\nHence the answer is <b>1</b>.\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "15-12-2016",
    "is_direct_submittable": false,
    "contest_name": "ACM-ICPC Asia-Chennai Onsite Mirror Contest 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6",
    "todo": false,
    "time": {
        "view_start_date": 1482211800,
        "end_date": 1482229800,
        "practice_submission_allowed": true,
        "visible_start_date": 1793254705,
        "submit_start_date": 1482211800,
        "current": 1537434310
    },
    "problem_author_html_handle": "admin3",
    "problem_name": "Moving Clams",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/admin3'>admin3</a>",
    "problem_tester_html_handle": "",
    "problem_author": "admin3",
    "contest_code": "CHN16MOS",
    "max_timelimit": "5",
    "problem_code": "CHN16E"
}