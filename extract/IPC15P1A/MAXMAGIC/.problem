{
    "problem_code": "MAXMAGIC",
    "problem_author": "skullcrackers",
    "contest_name": "ICPC Preparatory Series by Team SkullCrackers",
    "todo": false,
    "problem_author_html_handle": "skullcrackers",
    "problem_name": "Maximum Magic Walk",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "IPC15P1A",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/dfs'>dfs</a>, <a class='problem-tag-small ' href='/tags/problems/dynamic-programming'>dynamic-programming</a>, <a class='problem-tag-small ' href='/tags/problems/graph'>graph</a>, <a class='problem-tag-small ' href='/tags/problems/ipc151a'>ipc151a</a>, <a class='problem-tag-small ' href='/tags/problems/ipcquestion'>ipcquestion</a>, <a class='problem-tag-small ' href='/tags/problems/skullcrackers'>skullcrackers</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>Given is an undirected weighted graph with <b>n vertices and m edges</b>. There may be self loops and/or multiple edges in the graph.</p>\n<p>\nA u-v walk is defined as a sequence of vertices starting at u and ending at v, where consecutive vertices in the sequence are adjacent vertices in the graph i.e. consecutive vertices are connected by some edge.\n</p>\n<p>\nAn arbitary walk of length <b>k+1</b> is, <b>V1,E1,V2,E2,V3,...,Vk,Ek,V(k+1)</b>. where <b>Vi</b> and <b>V(i+1)</b> are connected by edge <b>Ei</b> with weigth <b>Ci</b>.\n</p>\n<p> In simpler informal words, walk is a path in a graph with no restriction<br />\non the number of times you can visit a vertex or edge. </p>\n<p>\nFor such walk we define magic to be, <br /><br />\n<b>magic(walk) = <b>(C1 &amp; C2) ^ (C2 &amp; C3) ^ ... ^ (C(k-1) &amp; C(k)) if k >= 2</b><br /><br />\nmagic(walk) = 0 if k &lt; 2</b>\n</p>\n<p>Note: Here Ci (1 &lt;= i &lt;= k) are the corresponding edge weights.<br />\n<br /></p>\n<p>\nWe love magic, don't we? Hence we always want to maximize it. But for a given graph, there are infinite different walks possible. So, you need to think smart and write a program which prints the maximum magic which can be achieved for some walk in the given graph.<br />\n<br />\n</p>\n<p>Here, ' &amp; ' is Binary AND Operator, ' ^ ' is Binary XOR Operator.\n</p>\n<h3>Input</h3>\n<p>First line contains two integers <b>n</b> and <b>m</b>. <br /><br />\nNext m lines, each contain three space separated integers <b>u</b>,<b>v</b> and <b>c</b> denoting an undirected edge in graph between vertices u and v with weight c. </p>\n<h3>Output</h3>\n<p>Print the <b>maximum magic</b> that can be achieved for <b>some walk</b> in the graph.</p>\n<h3>Constraints</h3>\n<ul>\n<li>1 &lt;= n &lt;= 100 </li>\n<li>1 &lt;= m &lt;= 150 </li>\n<li>0 &lt;= c &lt;= 100 </li>\n<li>1 &lt;= u,v &lt;= n </li>\n</ul>\n<h3>Sample Input 1:</h3>\n<p>2 1<br /></p>\n<pre>1 2 5</pre><h3>Sample Output 1:</h3>\n<p>5</p>\n<h3>Explanation:</h3>\n<p>Let the walk be 1->2->1<br /><br />\nFor this walk, magic = (5 &amp; 5) = 5</p>\n<h3>Sample Input 2:</h3>\n<p>4 4<br /><br />\n1 2 1<br /><br />\n2 4 3<br /><br />\n3 1 4<br /><br />\n4 3 2<br /></p>\n<h3>Sample Output 2:</h3>\n<p>7<br /></p>\n<h3>Explanation: </h3>\n<p>Number the 4 vertices in input as 1,2,3,4.<br /><br />\nNumber the 4 edges in input as a,b,c,d.<br /><br />\nLet weight of any edge x be |x|.<br /><br />\nFor <code>walk = {1,c,3,c,1,a,2,b,4,d,3}<br /><br />\nmagic = (|c| &amp; |c|) ^ (|c| &amp; |a|) ^ (|a| ^ |b|) ^ (|b| ^ |d|) <br /><br />\n<t>= (4 &amp; 4) ^ (4 &amp; 1) ^ (1 &amp; 3) ^ (3 &amp; 2)</t><br /><br />\n<t>= 4 ^ 0 ^ 1 ^ 2 = 7</t></code><br /><br />\nIt can be proven that 7 is maximum value magic can take for this input.</p>\n",
    "category_name": "main",
    "date_added": "9-10-2015",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "max_timelimit": "2",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/MAXMAGIC",
    "problem_tester": null,
    "time": {
        "view_start_date": 1448465400,
        "end_date": 1448483400,
        "practice_submission_allowed": true,
        "visible_start_date": 1448483400,
        "submit_start_date": 1448465400,
        "current": 1537435802
    },
    "user": {
        "username": ""
    }
}