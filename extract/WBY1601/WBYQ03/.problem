{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>A programmer has to write a program to convert the infix notations, when entered into a calculator, to postfix notations. He wrote the following code to do the conversion, but somehow it doesn\u2019t seem to work. Help the programmer debug the code, so that the correct postfix notation is produced.</p>\n<h3>Input</h3>\n<ul>\n<li> The first line of the input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.</li>\n<li>Each line is a string in infix format.\n</li>\n<h3>Output</h3>\n<p>For each test case, output a single line containing a postfix expression</p>\n<h3>Constraints</h3>\n\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>1000</b></li>\n</ul>\n<h3>Example</h3>\n<pre><b>Input:</b>\n1+2\n\n<b>Output:</b>\n12+\n</pre><p><br /><br /></p>\n<h3><b>Code</b></h3>\n<p><br /><br />\nimport java.util.Scanner; <br /><br /></p>\n<p>class MakePostfix<br /><br />\n{<br /><br /></p>\n<p>    private enum Precedence<br /><br />\n    {<br /><br />\n        lparen(0), rparen(1), plus(2), minus(3), divide(4), times(5), mod(6), eos(7), operand(8);<br /><br />\n <br /><br />\n        private int index;<br /><br />\n        Precedence(int index)<br /><br />\n        {<br /><br />\n            this.index = index;<br /><br />\n        }<br /><br />\n        public int getIndex()<br /><br />\n        {<br /><br />\n            return index;<br /><br />\n        }        <br /><br />\n    } <br /><br />\n    <br /><br />\n    private static final int[] in_stack_precedence = {0, 3, 1, 1, 2, 2, 2, 4};<br /><br />\n    <br /><br />\n    private static final int[] incoming_char_precedence = {4, 3, 1, 1, 2, 2, 2, 0};<br /><br />\n    <br /><br />\n    private static final char[] operators = {'{', '}', '+', '-', '/', '*', '%', ' '};<br /><br />\n    <br /><br />\n    private Precedence[] stack; <br /><br />\n    <br /><br />\n    private int top;<br /><br />\n <br /><br />\n    private Precedence pop()<br /><br />\n    {<br /><br />\n        return stack[top];<br /><br />\n    }<br /><br />\n    <br /><br />\n    private void push(Precedence ele)<br /><br />\n    {<br /><br />\n        stack[top] = ele;<br /><br />\n    }<br /><br />\n    <br /><br />\n    public Precedence getToken(char symbol)<br /><br />\n    {<br /><br />\n        switch (symbol)<br /><br />\n        {<br /><br />\n        case '('  : return Precedence.rparen;<br /><br />\n        case ')'  : return Precedence.lparen;<br /><br />\n        case '+'  : return Precedence.plus;<br /><br />\n        case '-'  : return Precedence.minus;<br /><br />\n        case '/'  : return Precedence.divide;<br /><br />\n        case '*'  : return Precedence.times;<br /><br />\n        case '%'  : return Precedence.mod;<br /><br />\n        case ' '  : return Precedence.eos;<br /><br />\n        default   : return Precedence.operand;<br /><br />\n        }<br /><br />\n    }<br /><br />\n <br /><br />\n    <br /><br />\n    public String postfix(String infix)<br /><br />\n    {<br /><br />\n        String postfix = \"\";<br /><br />\n        top = 0;<br /><br />\n        stack = new Precedence[infix.length()+1];<br /><br />\n        stack[1] = Precedence.eos;<br /><br />\n        Precedence token;<br /><br />\n        for (int i = 0; i &lt;= infix.length(); i++)<br /><br />\n        {<br /><br />\n            token = getToken(infix.charAt(i++));<br /><br />\n    <br /><br />\n            if (token == Precedence.operand)<br /><br />\n                postfix = token + infix.charAt(i);<br /><br />\n    <br /><br />\n            else if ((token == Precedence.lparen)||(token == Precedence.rparen))<br /><br />\n            {<br /><br />\n                while (stack[top] != Precedence.lparen)<br /><br />\n                    postfix = stack[top] + operators[pop().getIndex()];<br /><br />\n    <br /><br />\n            <br /><br />\n            }<br /><br />\n    <br /><br />\n            else<br /><br />\n            {<br /><br />\n                while (in_stack_precedence[stack[top].getIndex()] > incoming_char_precedence[token.getIndex()])<br /><br />\n                    postfix = postfix + operators[stack[top].getIndex()];<br /><br />\n        <br /><br />\n            }<br /><br />\n        }<br /><br />\n    <br /><br />\n        while (token = stack[top] != Precedence.eos)<br /><br />\n            postfix = postfix + operators[token.getIndex()];<br /><br />\n <br /><br />\n        return postfix;<br /><br />\n    }<br /><br />\n    <br /><br />\n    public static void main (String[] args) <br /><br />\n    {<br /><br />\n        Scanner scan = new Scanner(System.in);<br /><br />\n        MakePostfix sy = new MakePostfix();<br /><br />\n <br /><br />\n        int t=scan.nextInt();<br /><br />\n        for(int z=0;z<t;++z)<br><br />\n        {<br /><br />\n        String infix = scan.next();<br /><br />\n <br /><br />\n        String postfix = sy.postfix(infix);<br /><br />\n        System.out.println(postfix);<br /><br />\n        }<br /><br />\n    }<br /><br />\n}<br /><br />\n<br /><br />\n<br /></t;++z)<br></p>\n<hr />\n<h3>Steps to be followed</h3>\n<p>    1. Read the given description carefully and understand the problem.<br /><br /></p>\n<p>    2. Analyze the code given in the problem and find bugs(errors) in these codes..<br /><br /></p>\n<p>    3. The given code can be copied and compiled in the CodeChef online compiler (<a href=\"https://www.codechef.com/ide\">https://www.codechef.com/ide</a>).<br /><br /></p>\n<p>    4. Once the bugs are eliminated from the code, the clean code can be submitted as the solution to the problem..<br /><br /></p>\n<p>    5. The solution should be a debugged version of the code provided and must satisfy the test cases to be accepted..<br /><br /></p>\n<p><b>All the best!!</b></p>\n</ul>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "15-02-2016",
    "is_direct_submittable": false,
    "contest_name": "Whats Bugging You Qualifiers",
    "languages_supported": "JAVA",
    "todo": false,
    "time": {
        "view_start_date": 1455780600,
        "end_date": 1455793200,
        "practice_submission_allowed": true,
        "visible_start_date": 1766782199,
        "submit_start_date": 1455780600,
        "current": 1537435427
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #1E7D22;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>2&#9733;</span><span>sneha_rajeev</span>",
    "problem_name": "Postfix",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/sneha_rajeev'>sneha_rajeev</a>",
    "problem_tester_html_handle": "",
    "problem_author": "sneha_rajeev",
    "contest_code": "WBY1601",
    "max_timelimit": "1",
    "problem_code": "WBYQ03"
}