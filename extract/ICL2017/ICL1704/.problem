{
    "problem_code": "ICL1704",
    "problem_author": "likecs",
    "contest_name": "International Coding League (Rated)",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>likecs</span>",
    "problem_name": "Worst Case Analysis",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "ICL2017",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/easy'>easy</a>, <a class='problem-tag-small ' href='/tags/problems/icl2017'>icl2017</a>, <a class='problem-tag-small ' href='/tags/problems/likecs'>likecs</a>, <a class='problem-tag-small ' href='/tags/problems/priority'>priority</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>All of you must have heard of merge sort while learning sorting algorithms. So, now is time to explore it more. Let us consider the following </b>merge function</b> in the merge sort algorithm: (Assume 1-base indexing)</p>\n\n<pre><code>\nvoid merge(int a[], int b[], int n1, int n2, int c[])\n/* Function to merge the 2 arrays\na[1..n1] and b[1..n2] into array c[1..n1+n2] */\n{\n    int i = 1, j = 1, k = 1;\n    while (i <= n1 && j <= n2) {\n        if (a[i] <= b[j]) {  /* This is considered as 1 comparison */\n            c[k] = a[i];\n            i++;\n        }\n        else {\n            c[k] = b[j];\n            j++;\n        }\n        k++;\n    }\n    while (i <= n1) {\n        c[k] = a[i];\n        i++;\n        k++;\n    }\n    while (j <= n2) {\n        c[k] = b[j];\n        j++;\n        k++;\n    }\n}\n</code></pre>\n\n<p>Now, in the function above, let us denote the maximum number of comparisons needed in the worst case while merging 2 arrays of sizes <b>n<sub>1</sub></b> and <b>n<sub>2</sub></b> as <b>X</b>. We are given <b>M</b> sorted arrays of size <b>n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub>, ..., n<sub>M</sub></b>. To make a larger array of size <b>n<sub>1</sub> + n<sub>2</sub> + n<sub>3</sub> + ... + n<sub>M</sub></b>, you perform the following operation: </p>\n\n<ol>\n<li>If only 1 array is left then stop.</li>\n<li>Else Pick any 2 sorted arrays and merge them using the above operation.</li>\n</ol>\n\n<p>Assume, that while merging any 2 arrays, it always takes worst case in the number of comparisons. You are required to <b>minimise the number of comparison operations</b>.</p>\n\n<h3>Input</h3>\n<p>The first line in the input consists of the number of test cases, <b>T</b>. Each input consists of 2 lines. The first line contain an integer <b>M</b>, denoting the number of arrays. The second line consists of the sizes of arrays, <b>n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub>, ... n<sub>M</sub></b></p>\n\n<p><b>NOTE: The input dataset is large. Please prefer using scanf/printf in C/C++ and buffered I/O in Java.</b></p>\n\n<h3>Output</h3>\n<p>Output for each test case, the minimum number of comparisions while merging the <b>M</b> arrays into the final array.</p>\n\n<h3>Constraints</h3>\n<p>1 \u2264 T \u2264 20, 2 \u2264 M \u2264 10<sup>5</sup></p>\n\n<p>2 \u2264 n<sub>i</sub> \u2264 10<sup>9</sup></p>\n\n<h3>Sample Input</h3>\n<pre>2\n2\n3 4\n3\n4 3 4\n</pre>\n\n<h3>Sample Output</h3>\n<pre>6\n16\n</pre>\n\n<p>In the first test case, the number of comparisons in worst case are 6. Consider for example, arrays <b>a = {1, 6, 9}</b> and <b>b = {2, 5, 7, 8}</b>. The comparisons are between the pair of elements (1, 2), (2, 6), (5, 6), (6, 7), (7, 9), (8, 9).</p>\n\n<p>In the second test case, the best order to perform the merge operations is as follows. Merge the arrays with sizes 3 and 4 to obtain array of size 7. The number of comparisons in worst case is 6. Merge the arrays with sizes 4 and 7 to obtain array of size 11. The number of comparisons in worst case is 10. The total number of comparisons is <b>6 + 10 = 16</b></p>",
    "category_name": "main",
    "date_added": "26-03-2017",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "max_timelimit": "2",
    "problem_status": "unattempted",
    "editorial_url": "https://discuss.codechef.com/problems/ICL1704",
    "problem_tester": null,
    "time": {
        "view_start_date": 1490542200,
        "end_date": 1490553000,
        "practice_submission_allowed": true,
        "visible_start_date": 1490553000,
        "submit_start_date": 1490542200,
        "current": 1537433963
    },
    "user": {
        "username": ""
    }
}