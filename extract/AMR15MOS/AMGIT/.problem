{
    "problem_code": "AMGIT",
    "problem_author": "balajiganapath",
    "contest_name": "ACM-ICPC Asia-Amritapuri Onsite Mirror Contest 2015",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>balajiganapath</span>",
    "problem_name": "git",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "AMR15MOS",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/acm15amr'>acm15amr</a>, <a class='problem-tag-small ' href='/tags/problems/balajiganapath'>balajiganapath</a>, <a class='problem-tag-small ' href='/tags/problems/dynamic-programming'>dynamic-programming</a>, <a class='problem-tag-small ' href='/tags/problems/hashing'>hashing</a>, <a class='problem-tag-small ' href='/tags/problems/string'>string</a>, <a class='problem-tag-small ' href='/tags/problems/tree'>tree</a>",
    "body": "<p>\n    <i>Farzi Coder</i> has been assigned an important coding assignment by his boss <i>Programmer Bhai</i>. Now, <i>Farzi Coder</i> has done coding his project and has to submit it to a central git repository.<br />\n    In git, before committing we have to add the files which we want to commit to the stage. We can add (stage) or remove (unstage) files to/from the stage. Initially the stage is empty.<br />\n    <i>Programmer Bhai</i> is very particular about what goes into the repository and what doesn't. He has given a list of files alongwith whether he wants the file in the stage or not.<br />\n    e.g.\n    </p>\n<pre>    stage /code/lib/acpp\n    stage /code/lib/bcpp\n    unstage /code/lib/aout\n    </pre><p>\n    This means we want <code>/code/lib/acpp</code> and <code>/code/lib/bcpp</code> to be in the stage while <code>/code/lib/aout</code> should not be in the stage.<br />\n    There are 2 git commands to control staging:</p>\n<pre>    git add <i>&lt;path></i>\n    git remove <i>&lt;path></i>\n    </pre><p>\n    The path here can be a path to a file or a path to a directory. If the path is to a directory, the command applies to all the files and subdirectories inside that directory recursively.</p>\n<p>    <i>Farzi Coder</i> wants to commit the code <i>asap</i>.<br />\n    What is the minimum number of git commands needed to add all the required files to stage <b><i>while making sure none of the unstage files are in the stage.</i></b> </p>\n<h2>Input</h2>\n<p>    The first line of the input has the number <b>T</b> denoting the number of test cases.\n</p><p>\n    The first line of each test case has the number <b>N</b> denoting the number of files in this case.</p>\n<p>\n    Each of the next <b>N</b> lines contains a word denoting whether the following file should be on the stage or not followed by the path to the file.</p>\n<p>\n    i.e. the 2 types of input will be <code>stage <i>&lt;path></i></code> and <code>unstage <i>&lt;path></i></code>. </p>\n\n<h2>Output</h2>\n<p>\n    For each test case, output the number of minimum git commands needed.\n   </p>\n<h2>Constraints</h2>\n<ul>\n<li><b>1 \u2264 T \u2264 10</b></li>\n<li><b>1 \u2264 N \u2264 100</b></li>\n<li><b>The length of each path doesn't exceed 100</b></li>\n<li><b>Each path is a valid path to a file. Each path input follows these rules:</b></li>\n<ul>\n<li>It doesn't end with a forward slash (/)</li>\n<li>Each path starts from the root directory (/)</li>\n<li>There are no two consecutive forward slashes</li>\n<li>Each file or directory name consists only of lowercase alphabets</li>\n<li>All paths in a test case are distinct</li>\n<li>There will be no file - directory conflict. e.g. consider /a/b/c and /a/b. Here b is both a file and a directory.</li>\n</ul>\n</ul>\n<h2>Sample</h2>\n<h3>Input</h3>\n<pre>3\n3\nstage /code/lib/acpp\nstage /code/lib/bcpp\nunstage /code/lib/aout\n2\nunstage /code/lib/acpp\nunstage /code/lib/bcpp\n3\nstage /code/lib/acpp\nstage /code/lib/bcpp\nstage /code/lib/aout\n    </pre><h3>Output</h3>\n<pre>2\n0\n1\n    </pre><h3>Explanation</h3>\n<p>    <b>Case 1:</b> The following 2 commands are enough:</p>\n<pre>    git add /\n    git remove /code/lib/aout\n    </pre><p>    The first command adds the entire project to the stage while the second command removes aout from the stage as required.<br /><br />\n    <br /><br />\n    <b>Case 2:</b> As initially there are no files in the stage, no commands are necassary.<br /><br />\n    <br /><br />\n    <b>Case 3:</b> We add all the files to stage using <code><b>git add /</b></code> or <code><b>git add /code/lib/</b></code></p>\n",
    "category_name": "main",
    "date_added": "20-12-2015",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA",
    "max_timelimit": "1",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/AMGIT",
    "problem_tester": null,
    "time": {
        "view_start_date": 1450672200,
        "end_date": 1450690200,
        "practice_submission_allowed": true,
        "visible_start_date": 1761681100,
        "submit_start_date": 1450672200,
        "current": 1537435722
    },
    "user": {
        "username": ""
    }
}