{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<h3> Read problems statements in <a target=\"_blank\" \nhref=\"http://www.codechef.com/download/translated/SNCKFL17/mandarin/MINIMAX.pdf\">Mandarin Chinese</a>, <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL17/russian/MINIMAX.pdf\">Russian</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/SNCKFL17/vietnamese/MINIMAX.pdf\">Vietnamese</a> as well.</h3>\n\n<p>Let's consider a square grid with <b>N</b> rows and <b>N</b> columns, both numbered 1 through <b>N</b>. Each cell contains one integer. Let r<sub>i</sub> denote the minimum value in the i-th row, and let C<sub>i</sub> denote the maximum value in the i-th column. A grid is called <i>nice</i> if and only if the following condition holds true:</p>\n\n<p>max(r<sub>1</sub>, r<sub>2</sub>, ..., r<sub><b>N</b></sub>) = min(C<sub>1</sub>, C<sub>2</sub>, ..., C<sub><b>N</b></sub>)</p>\n\n<p>Chef has a square grid and can change some of its elements (numbers in the cells).\nFind the minimum possible number of elements Chef should change, so that the new grid is nice.</p>\n\n<p>An element can be changed to any integer.</p>\n\n\n<h3>Input</h3>\n\n<p>The first line of the input contains an integer <b>N</b>, denoting the size of the grid.</p>\n\n<p>The following <b>N</b> lines describe the grid.\nThe i-th of those lines contains <b>N</b> integers, denoting the numbers in the i-th row.</p>\n\n<h3>Output</h3>\n\n<p>Print one integer, denoting the minimum number of changes required to make the grid nice.</p>\n\n<h3>Constraints</h3>\n\n<ul>\n<li>1 \u2264 <b>N</b> \u2264 1000</li>\n<li>Each number in the initial grid is between 1 and 10<sup>6</sup>, inclusive.</li>\n</ul>\n\n\n<h3>Examples</h3>\n<pre><b>Input1:</b>\n3\n10 20 30\n20 10 30\n10 5 35\n\n<b>Output1:</b>\n1\n\n\n<b>Input2:</b>\n3\n10 20 10\n20 10 5\n30 30 35\n\n<b>Output2:</b>\n0\n\n\n<b>Input3:</b>\n4\n1 1 3 4\n5 1 1 8\n9 10 1 1\n1 14 15 1\n\n<b>Output3:</b>\n2\n</pre>\n\n\n<h3>Explanation</h3>\n\n<p><b>Example #1.</b> In the first example, initially we have r<sub>1</sub> = 10, r<sub>2</sub> = 10 and r<sub>3</sub> = 5. For columns, we have C<sub>1</sub> = 20, C<sub>2</sub> = 20 and C<sub>3</sub> = 35.</p>\n\n<p>max(r<sub>1</sub>, r<sub>2</sub>, r<sub>3</sub>) = 10 and min(C<sub>1</sub>, C<sub>2</sub>, C<sub>3</sub>) = 20, and so the given grid isn't nice.\nChef can change the second number in the first row from 20 to 10, to get the following nice grid:</p>\n\n<pre>10 <b>10</b> 30\n20 10 30\n10 5 35</pre>\n\n<p>The answer is 1 because we must change at least 1 number.</p>\n\n<p><b>Example #2.</b> The provided grid is already nice, so the answer is 0.</p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": null,
    "is_direct_submittable": false,
    "contest_name": "SnackDown 2017 Onsite Final Mirror",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1498892400,
        "end_date": 1498910400,
        "practice_submission_allowed": true,
        "visible_start_date": 1809931733,
        "submit_start_date": 1498892400,
        "current": 1537433744
    },
    "problem_author_html_handle": null,
    "problem_name": "Minimax",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/errichto'>errichto</a>",
    "problem_tester_html_handle": null,
    "problem_author": null,
    "contest_code": "SNFL17MR",
    "max_timelimit": "2",
    "problem_code": "MINIMAX"
}