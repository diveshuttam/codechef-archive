{
    "problem_code": "MOSTDIST",
    "problem_author": "kostya_by",
    "contest_name": "November Cook-Off 2014",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>kostya_by</span>",
    "problem_name": "Most Distant Points",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "",
    "contest_code": "COOK52",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/cook52'>cook52</a>, <a class='problem-tag-small ' href='/tags/problems/easy'>easy</a>, <a class='problem-tag-small ' href='/tags/problems/geometry'>geometry</a>, <a class='problem-tag-small ' href='/tags/problems/heap'>heap</a>, <a class='problem-tag-small ' href='/tags/problems/kostya_by'>kostya_by</a>, <a class='problem-tag-small ' href='/tags/problems/manhattan'>manhattan</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/COOK52/mandarin/MOSTDIST.pdf\">Mandarin Chinese</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/COOK52/russian/MOSTDIST.pdf\">Russian</a> as well.</h3>\n<p>\n\tLet's consider a set of points <b>S</b>. Initially, <b>S</b> is an empty set. Your task is to implement a data structure that can process the following queries efficiently:\n</p>\n<p><ul>\n<li type=\"1\">\n\t\t\t\"+ <b>X</b> <b>Y</b>\" - add a new point <b>P</b> with coordinates (<b>X</b>, <b>Y</b>) to <b>S</b>. It's guaranteed that this point will not be in <b>S</b>.\n\t\t</li>\n<li type=\"1\">\n\t\t\t\"- <b>N</b>\" - remove a point that was added during the <b>N</b>'th adding query from <b>S</b>. All of the adding queries are numbered in the order of their appearance starting from 1 (queries of other types are not included). It's guaranteed that this point is in <b>S</b>.\n\t\t</li>\n<li type=\"1\">\n\t\t\t\"? <b>X</b> <b>Y</b>\" - calculate the maximal Manhattan distance between a point <b>P</b> with coordinates (<b>X</b>, <b>Y</b>) and any point from <b>S</b>. It's guaranteed that <b>S</b> will not be empty.\n\t\t</li>\n</ul>\n</p>\n<p>\n\tIn addition, you won't be given the exact query data, but instead should decode it in the following way:\n</p>\n<p>\n\tLet's store the result of the last processed query of the third type in a variable called <b>ANSWER</b>. Initially, <b>ANSWER</b> is equal to 0. You will be given <b>X'</b>, <b>Y'</b> and <b>N'</b> instead of the real values of <b>X</b>, <b>Y</b> and <b>N</b>. To get the real data you should perform the following computations:\n</p>\n<p><ul>\n<li>\n\t\t\t<b>X</b> = <b>X'</b> xor <b>ANSWER</b>;\n\t\t</li>\n<li>\n\t\t\t<b>Y</b> = <b>Y'</b> xor <b>ANSWER</b>;\n\t\t</li>\n<li>\n\t\t\t<b>N</b> = <b>N'</b> xor <b>ANSWER</b>.\n\t\t</li>\n</ul>\n</p>\n<p>\n\tDon't forget to update the value of <b>ANSWER</b> after processing each query of the third type.\n</p>\n<h3>Note</h3>\n<p>\n\tMaybe some of you aren't familiar with some terms in the statement. Here are some articles that could help you understand the problem correctly:</p>\n<ul>\n<li>XOR operation: <a href=\"http://en.wikipedia.org/wiki/Exclusive_or\">http://en.wikipedia.org/wiki/Exclusive_or</a></li>\n<li>Manhattan distance: <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\">http://en.wikipedia.org/wiki/Taxicab_geometry</a></li>\n</ul>\n\n<h3>Input</h3>\n<p>\n\tThe first line of the input contains one integer <b>Q</b> denoting the number of queries to process.\n</p>\n<p>\n\tEach of the next <b>Q</b> lines contains a query to process in the format described above.\n</p>\n<h3>Output</h3>\n<p>\n\tFor each query on the third type you should output your answer on a new line.\n</p>\n<h3>Constraints</h3>\n<p>1 \u2264 <b>Q</b> \u2264 500,000(5 \u00d7 10<sup>5</sup>);</p>\n<p>0 \u2264 <b>X'</b>, <b>Y'</b>, <b>N'</b>  &lt; 2<sup>31</sup> for each query;</p>\n<p>0 \u2264 <b>X</b>, <b>Y</b> \u2264 10<sup>9</sup> for each query.</p>\n<h3>Example</h3>\n<pre><b>Input:</b>\n10\n+ 8 1\n- 1\n+ 3 9\n? 8 4\n? 8 8\n? 12 0\n+ 6 5\n? 7 8\n? 4 5\n- 9\n\n<b>Output:</b>\n10\n8\n2\n4\n11\n\n</pre><h3>Explanations</h3>\n<p>Here's a non-encrypted version of the example:</p>\n<pre>\n10\n+ 8 1\n- 1\n+ 3 9\n? 8 4\n? 2 2\n? 4 8\n+ 4 7\n? 5 10\n? 0 1\n- 2\n</pre><p>The answers are the same.</p>\n",
    "category_name": "main",
    "date_added": "24-10-2014",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, CLOJ, FS",
    "max_timelimit": "1.5",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/MOSTDIST",
    "problem_tester": null,
    "time": {
        "view_start_date": 1416758400,
        "end_date": 1416767400,
        "practice_submission_allowed": true,
        "visible_start_date": 1416767400,
        "submit_start_date": 1416758400,
        "current": 1537437219
    },
    "user": {
        "username": ""
    }
}