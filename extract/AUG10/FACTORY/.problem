{
    "problem_code": "FACTORY",
    "problem_author": "friggstad",
    "contest_name": "August 2010 Challenge",
    "todo": false,
    "problem_author_html_handle": "friggstad",
    "problem_name": "Optimizing Production and Sales",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>innocentboy</span>",
    "contest_code": "AUG10",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/aug10'>aug10</a>, <a class='problem-tag-small ' href='/tags/problems/challenge'>challenge</a>, <a class='problem-tag-small ' href='/tags/problems/friggstad'>friggstad</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\nYour boss at the gadget company has recently asked you to help optimize operating costs.\nYour company is in charge of both manufacturing and selling  their world-famous gadgets.\nCurrently, there are a number of factories open in various locations around the world and\neach store receives their gadgets from precisely one factory.\n\n</p><p>\nEach factory has an associated operating cost and the cost of supplying a store from a\nfactory is proportional to the distance between the store and factory. Your job is to close\nsome factories and assign an open factory to each store. The cost of such an assignment\nis the sum of the factory operating costs of the open factories plus the total cost of assigning each\nstore to a factory. Of course, your objective is to find a cheap solution.\n\n</p><p>\nTo reiterate, each store must be supplied by exactly one open factory and each factory\nmay supply any number of stores. The operating cost of the factory does not depend\non how many stores it is supplying.\n\n\n<h3>Input</h3>\n</p><p>\nThe first line contains a single integer T &le; 30 indicating the number of test cases to follow.\nThe first line of each test case consists of two integers F and S, each between 1 and 100,\nwhere F is the number of\nfactories and S is the number of stores. The next line contains F non-negative floating point\nvalues where the i'th value is the operating cost of factory i.\nThe next S lines contain F non-negative floating point values where the i'th value on the j'th\nline is the cost of supplying store j with factory i.\n\n</p><p>\nSince the cost of supplying a store by a factory is proportional to the distance between the\nstore and factory, you may assume that a sort of triangle inequality holds. Say d[j,i] is the\ncost of supplying store j from factory i. Then for any two stores j,j' and any two factories i,i'\nwe have d[j,i] &le; d[j,i'] + d[j',i'] + d[j',i]. To say it plainly, the shortest\ndistance between store j and factory i is the direct route.\n\n</p><p>\nAll floating point values are between 0 and 1000000 and contain at most two points of precision.\nConsecutive test cases are separated by a blank line including a blank line immediately preceding\nthe first case.\n\n<h3>Output</h3>\n</p><p>\nFor each test case you are to output two lines. The first line consists of F values, each either 0 or 1.\nIf the i'th value is 1 then factory i is open and if the i'th value is 0 then factory i is closed.\nThe second line consists of S values, each between 1 and F. Here, the j'th value is the index of\nan <b>open</b> factory from which store j is supplied.\n\n<h3>Example</h3>\n\n<pre>\n<b>Input:</b>\n2\n\n3 3\n1 2.5 3\n3 1.7 1.5\n1 2.1 1.2\n2.1 1.4 2\n\n2 3\n0 15\n4 0\n4 0\n4 0\n\n<b>Output:</b>\n1 0 1\n3 1 1\n1 0\n1 1 1\n</pre>\n\n<h3>Scoring</h3>\n</p><p>\nFor each test case, let K be the cost of the solution that keeps all factories open and assigns\neach client to any nearest factory (i.e. the current cost of manufacturing and supplying gadgets\nbefore your, hopefully cheaper, solution is applied). We will compute the cost of your solution,\nsay L, and assign a score of L/K to the test case (we guarantee K &gt;= 1 for each test case).\nThe final score is then the sum of the scores for each test case. The goal is, of course, to minimize\nthe total score.\n\n</p><p>\nFor example, the first test case has of K = (1 + 2.5 + 3) + (1.5 + 1 + 1.4) = 10.4 (the first set of parenthesis\ncontains the cost of the factories and the second contains the cost of assigning stores to their cheapest factory).\nThe output solution has L = (1 + 3) + (1.5 + 1 + 2.1) = 8.6. Therefore, the score for the first test\ncase is 8.6/10.4 = 0.826923. Similarly, the second test case has K = (0 + 15) + (0 + 0 + 0) and the solution\noutput has L = 0 + (4 + 4 + 4) = 12 so the score is 12/15 = 0.8.\n\n<h3>Test Data</h3>\nSome of the test data is hand-crafted to make certain heuristics perform poorly and some of the test data is randomly generated according to different distributions.</p>",
    "category_name": "main",
    "date_added": "8-07-2010",
    "status": "success",
    "languages_supported": "C, JAVA, PYTH, CS2, PAS fpc, PAS gpc, RUBY, PHP, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TEXT",
    "max_timelimit": "1.65521",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/FACTORY",
    "problem_tester": "innocentboy",
    "time": {
        "view_start_date": 1280655000,
        "end_date": 1281519000,
        "practice_submission_allowed": true,
        "visible_start_date": 1281519000,
        "submit_start_date": 1280655000,
        "current": 1537439554
    },
    "user": {
        "username": ""
    }
}