{
    "problem_code": "ANUDTQ",
    "problem_author": "anudeep2011",
    "contest_name": " May Challenge 2014",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>anudeep2011</span>",
    "problem_name": "Dynamic Trees and Queries",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>xcwgf666</span>",
    "contest_code": "MAY14",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/anudeep2011'>anudeep2011</a>, <a class='problem-tag-small ' href='/tags/problems/data-structure'>data-structure</a>, <a class='problem-tag-small ' href='/tags/problems/hard'>hard</a>, <a class='problem-tag-small ' href='/tags/problems/may14'>may14</a>, <a class='problem-tag-small ' href='/tags/problems/tree'>tree</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/MAY14/mandarin/ANUDTQ.pdf\">Mandarin Chinese </a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/MAY14/russian/ANUDTQ.pdf\">Russian</a>.</h3>\n<p>Given a directed tree with <b>N</b> nodes. You need to process <b>M</b> queries.</br>\nEach node has a <b>key</b> and a <b>value</b>, a node is referenced by its key. <b>N</b> nodes have <b>keys</b> from <b>0</b> to <b>N-1</b>.\nRoot always has the <b>key</b> equal to <b>0</b>. Queries can be of the following 4 types:<br>\n1. Given a <b>key</b> of a node present in the tree, append a child node to it. The new node gets the smallest never-used positive integer as its key. The <b>value</b> of the new node will be given in the input.<br>\n2. Given a <b>key</b> of a node(call it <b>A</b>) present in the tree. Add <b>value</b> to the value of all the nodes present in the subtree rooted at <b>A</b>.<br>\n3. Given a <b>key</b> of a node(call it <b>A</b>) present in the tree. Remove the subtree rooted at <b>A</b> from the tree.<br>\n4. Given a <b>key</b> of a node(call it <b>A</b>) present in the tree. Output the sum of values of all the nodes in subtree rooted at <b>A</b>.</p>\n\n<p><b>Input is encoded:</b><br>\n<b>Keys</b> in <b>M</b> Queries of the input are encoded in the following way:<br>\nLet <b>SPECIAL</b> = 0 initially. Whenever a query of the type 4 occurs, <b>SPECIAL</b> is updated to the result of that query.\nAll the <b>keys</b> given in queries are encoded, in order to decode them you need to add SPECIAL to it.<br>\nThat is, you are given <b>encoded_key</b> as input, to get <b>key</b> use the formula <b>key</b> = <b>SPECIAL</b> + <b>encoded_key</b>.</p>\n<h3>Input</h3>\n<p>First line of input has <b>N</b>, the number of nodes.<br>\nSecond line has <b>N</b> integers, the values of given <b>N</b> nodes respectively.<br>\nThen, <b>N-1</b> lines follow, each has two integers <b>u</b>, <b>v</b>. which specifies an edge from <b>u</b> to <b>v</b>.<br>\nNext line contains a single integer <b>M</b>, the number of queries.<br>\nEach query consists of 2 lines, First line has the the type of query, second line is as follows:<br>\nFor queries 1 and 2, there are two integers, first one represents the <b>key</b> of a node in tree, second one represents the <b>value</b>.<br>\nFor queries 3 and 4, there is a single integer, which represents the <b>key</b> of a node in tree.\n</p>\n\n<h3>Output</h3>\n<p>For each query of type 4, output the required answer.</p>\n\n<h3>Constraints</h3>\n<ul>\n<li>1 \u2264 <b>N</b> \u2264 </b>10^5</li>\n<li>1 \u2264 <b>M</b> \u2264 </b>10^5</li>\n<li>0 \u2264 <b>u</b> < N</li>\n<li>0 \u2264 <b>v</b> < N, <b>u</b> is not equal to <b>v</b></li>\n<li>All the <b>keys</b> in the input are valid</li>\n<li>If the type of the query is 3, the the <b>key</b> is nonzero.</li>\n<li><b>All the rest numbers in the input are in the range [-1000, 1000]</b></li>\n</ul>\n\n<h3>Example</h3>\n<pre>\n<b>Input:</b>\n2\n10 20\n0 1\n4\n4\n0\n1\n-30 5\n2\n-30 1\n4\n-30\n<br>\n<b>Output:</b>\n30\n38\n</pre>\n\n<h3>Explanation</h3>\n<b>Query #1</b><br>\n<b>type</b> = 4 <b>encoded_key</b> = 0<br>\nInitially <b>SPECIAL</b> = 0<br>\n<b>key</b> = <b>encoded_key + SPECIAL</b> = 0<br>\nvalue at 0 + value at 1 = 10 + 20 = 30 is the answer<br>\n<b>Now SPECIAL is updated to 30</b><br>\n<b>Query #2</b><br>\n<b>type</b> = 1 <b>encoded_key</b> = -30 <b>value</b> = 5 <br>\n<b>SPECIAL</b> = 30 <br>\n<b>key</b> = <b>encoded_key</b> + <b>SPECIAL</b> = -30 + 30 = 0<br>\nSo we add a child node(with the <b>key</b> = 2) to the node with the <b>key</b> 0, the child node gets the <b>value</b> of 5</br>\n<br/>\n<b>EDITS MADE:</b><br/>\nFirstly, sorry for the mistake.<br/>\n<b>Old :</b> Let <b>SPECIAL</b> = 0 initially. Whenever a query of the type 4 occurs, <b>SPECIAL</b> is increased by the result of that query.<br/>\n<b>New :</b> Let <b>SPECIAL</b> = 0 initially. Whenever a query of the type 4 occurs, <b>SPECIAL</b> is updated to the result of that query.<br/>",
    "category_name": "main",
    "date_added": "3-02-2014",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, CLOJ, FS",
    "max_timelimit": "2",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/ANUDTQ",
    "problem_tester": "xcwgf666",
    "time": {
        "view_start_date": 1399023000,
        "end_date": 1399887000,
        "practice_submission_allowed": true,
        "visible_start_date": 1399887000,
        "submit_start_date": 1399023000,
        "current": 1537437566
    },
    "user": {
        "username": ""
    }
}