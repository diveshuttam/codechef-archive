{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\u00a0</p>\n<p><b>Problem description.</b></p>\n<p>NITT has introduced electric ferry cars to ease the navigation within the campus in an eco-friendly manner. There are various checkpoints inside the campus. Each ferry car carries passengers from one checkpoint to another along a fixed route. <b>Santa</b> and <b>Ajay</b> are the elite programmers of NITT, and they also happen to be part of <b>WebOps </b>team of <b>Pragyan'17</b>. They have to deploy the Pragyan app today but it turns out that as usual <b>Ajay</b> is stuck with one of his <b>4 girlfriends</b>.\n</p>\n\n<p>\nWhile <b>Santa</b> is waiting for <b>Ajay</b> to come, he is working on minor bug fixes in the app. But he is curious as to when <b>Ajay</b> will be reaching and wants you to calculate the time taken for <b>Ajay</b> to reach <b>Santa.</b> \n</p>\n\n<p>\nSo, the path taken by the ferry cars can be assumed to form a tree with checkpoints as nodes (i.e., <b>Ajay</b> can get in at any checkpoint and reach <b>Santa</b> in only one way). The time taken by the ferry car to reach one checkpoint from another is given initially but it can change due to the overcrowded streets of <b>Pragyan.</b> It can be assumed that there's no other delay other than the travel time given by the weights of edges in the tree. \nYou have to take care of two types of queries:\n</p>\n\n<p>\n<b>Type 1</b>: Finding the time taken for <b>Ajay</b> to reach <b>Santa</b> if <b>Ajay</b> is in node x, and <b>Santa</b> is in node y.<br>\n<b>Type 2:</b> Change the value of the i'th edge of the tree to new val given.\n</p>\n\n<p><b>\nAs the answer can be huge, print the answer modulo 1000000007 (10^9 + 7)\n</b>\n</p>\n\n<p>\nNote: As testcases are huge, Use faster methods for input and output.\n</p>\n\n\n<h3>Input</h3>\n<p>Input description.</p>\n<p>The first line of the input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.\n</p>\n<p>The first line of each test case contains two integers <b>N</b> denoting the number of nodes in the tree and <b>Q</b> denoting the number of queries.</p>\n<p>\n<b>N-1</b> lines follow containing two integers <b>x</b> and <b>time</b> denoting an edge between the <b>i'th</b> node and <b>x</b> with the <b>time</b> taken to reach one node from another being <b>time</b>. <b>i</b> is 1-indexed and represents the index of the edge</p>\n<p>\nQ lines follow which can be of these two types:</p>\n\n<p><b>Type 1:</b> <b>1 x y</b> where x and y are integers denoting the two nodes in the tree.<br>\n<b>Type 2:</b> <b>2 i time</b> where i denotes the i'th edge in the input and time denotes the new time taken in between them.\n</p>\n\n<h3>Output</h3>\n<p>Output description.</p>\n<p>For each query of type 1, Output a single integer on a new line denoting the time taken to travel between x and y</p>\n\n<h3>Constraints</h3>\n<ul>\n<li><b>1</b> \u2264 <b>T</b> \u2264 <b>15</b></li>\n<li><b>2</b> \u2264 <b>N</b> \u2264 <b>100000</b></li>\n<li><b>1</b> \u2264 <b>Q</b> \u2264 <b>100000</b></li>\n<li><b>1</b> \u2264 <b>x,y</b> \u2264 <b>N</b></li>\n<li><b>1</b> \u2264 <b>i</b> \u2264 <b>N-1</b></li>\n<li><b>2</b> \u2264 <b>time</b> \u2264 <b>1000000</b></li>\n</ul>\n<p>\u00a0</p>\n\n<h3>Example</h3>\n<b>Input:</b>\n<pre>\n1\n3 3\n1 2\n1 4\n1 2 3\n2 1 6\n1 2 3\n</pre>\n<br/><br/>\n<b>Output:</b>\n<pre>\n6\n10\n</pre>\n<p>\u00a0</p>\n<h3>Explanation</h3>\n<p><img src=\"https://lakshmanaram.github.io/ferry_cars.png\" /></p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "27-02-2017",
    "is_direct_submittable": false,
    "contest_name": "Bytecode 2017",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1488641400,
        "end_date": 1488659400,
        "practice_submission_allowed": true,
        "visible_start_date": 1488659400,
        "submit_start_date": 1488641400,
        "current": 1537434058
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;</span><span>rvns03</span>",
    "problem_name": "Ferry cars",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/rvns03'>rvns03</a>",
    "problem_tester_html_handle": "",
    "problem_author": "rvns03",
    "contest_code": "BYCO2017",
    "max_timelimit": "2",
    "problem_code": "BYCO17D"
}