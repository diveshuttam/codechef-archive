{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3>Problem Description</h3>\n<br><br>\n<p>\n\t<b>Rohit</b> loves to eat and he has reached a magical cake shop. The magical cake shop has several cakes arranged in a line. Consider that there are <b>n</b> cakes placed in a line and each cake has a fixed weight, i.e weight of the ith cake is <b>wt[i]</b>. Rohit loves eating and he wants to eat as much \"total weight of cakes\" as possible.\n\t<br><br>\n\tBut this cake shop is a magical cake shop. <b><i>Everytime Rohit picks up a cake, all the cakes of lower or same weight as the cake picked up disappear from the shop, and only the cakes of higher weight remain available to be picked. Also, cakes are arranged in the line and every cake that appears before the picked up cake also disappears regardless of its weight</i></b>\n\t<br><br>\n\tFor example, consider there are 6 cakes in line. If he picks up the 4th cake, the first 3 cakes disappear regardless of their weight and only those cakes among 5th and 6th cake remain that have higher weight than the 3rd cake. Mathematically, <b><i>If the ith cake is picked up, all jth cakes disappear if i > j or wt[i] >= wt[j]</i></b>.\n\tOr in other words, <b><i>jth cake can be eaten after ith cake if and only if j > i and wt[j] > wt[i]</i></b>.\n\t<br><br>\n\tAnd, he also cannot eat cake partially. <b><i>He must eat the entire cake (total weight of that cake)</i></b> if he chooses to eat that cake.\n\t<br><br>\n\tWhat is the <b>maximum total weight of the cakes</b> that Rohit can eat ?\n</p>\n\n\n<h3>Input</h3>\n<ul>\n<li>The first line of the input contains 't', the number of test cases. '2*t' lines follow</li>\n<li>First line of each testcase contains <b>n</b> (the number of cakes)</li>\n<li>Second line of each testcase consists of <b>n</b> space seperated integers where the <b>ith</b> integer denotes the\nweight of the ith cake <b>(wt[i])</b>, in the order that they appear in the line.</li>\n</ul>\n<p>\u00a0</p>\n\n<h3>Output</h3>\n<p></p>\n<ul>\n<li>For each test case output the maximum total weight of cakes that Rohit can eat.</li>\n</ul>\n<p>\u00a0</p>\n\n<h3>Constraints</h3>\n<p></p>\n<ul>\n<li><b>1</b> \u2264 <b>t</b> \u2264 <b>10</b></li>\n<li><b>1</b> \u2264 <b>n</b> \u2264 <b>1000</b></li>\n<li><b>1</b> \u2264 <b>wt[i]</b> \u2264 <b>1000</b></li>\n</ul>\n<p>\u00a0</p>\n<h3>Example</h3>\n<pre><b>Input:</b>\n\n2\n5\n10 1 3 1 5\n6\n1 2 6 4 5 1\n\n<b>Output:</b>\n\n10\n12\n</pre>\n<p>\u00a0</p>\n<h3>Explanation</h3>\n<p>\n\tIn the first testcase, the cakes available in the beginning are: [10, 1, 3, 1, 5]\n\t<br>\n\tIf Rohit picks the first cake, all cakes with weight <= 10, and appearing before first cake (nothing in this case) disappear from the shop and the shop after picking the first cake becomes empty. So, Rohit has eaten cakes of total weight 10.\n\t<br>\n\tIf Rohit doesn't pick the first cake and picks the second cake of weight 1, the first and fourth cakes disappear and the shop after picking the second cake has cakes left: [3, 5]. Rohit can pick both these cakes and the total weight of cakes eaten by him will be 1 + 3 + 5 = 9.\n\t<br>\n\tSimilarly, if Rohit doesn't pick the first and second cakes and picks up the third cake, the first, second, and fourth cakes disappear and the shop after picking the third cake has cakes left: [5]. Rohit can pick the remaining cake and the total weight of cakes eaten by him will be 3 + 5 = 8.\n\t<br>\n\tWe can see that among all the strategies, the best strategy in this case is to pick only the first cake and the maximum total weight of cakes collected will be 10.\n\t<br><br>\n\tIn the second testcase, the optimal strategy is to pick, first, second, fourth and fifth cake (in order) having combined weight of 1 + 2 + 4 + 5 = 12. Any other strategy will result in lower or same total weight of cakes collected.\n\t</p>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "19-04-2018",
    "is_direct_submittable": false,
    "contest_name": "IEM Coding Olympiad (IEMCO)",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, CLOJ, COB, FS",
    "todo": false,
    "time": {
        "view_start_date": 1524321000,
        "end_date": 1524331800,
        "practice_submission_allowed": true,
        "visible_start_date": 1524331800,
        "submit_start_date": 1524321000,
        "current": 1537432544
    },
    "problem_author_html_handle": "tkh_iem",
    "problem_name": "Rohit and CakeWalk",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/tkh_iem'>tkh_iem</a>",
    "problem_tester_html_handle": "",
    "problem_author": "tkh_iem",
    "contest_code": "IEMCO5",
    "max_timelimit": "1",
    "problem_code": "IEMCO5B"
}