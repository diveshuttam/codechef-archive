{
    "problem_code": "GRAPHCT",
    "problem_author": "syco",
    "contest_name": "June 2010 Contest",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>syco</span>",
    "problem_name": "Graph Counting",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>pieguy</span>",
    "contest_code": "JUNE10",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/hard'>hard</a>, <a class='problem-tag-small ' href='/tags/problems/june10'>june10</a>, <a class='problem-tag-small ' href='/tags/problems/syco'>syco</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\nFirst for some definitions :\n</p>\n\n<p>\nLet G = (V,E) be an undirected graph containing an edge e = (u,v) with u \u2260 v. Let f be a function which maps every vertex in V\\{u,v} to itself, and otherwise, maps it to a new vertex w. The contraction of e results in a new graph G\u2032 = (V\u2032,E\u2032), where V\u2032 = (V\\{u,v})\u222a{w}, E\u2032 = E\\{e}, and for every x \u2208 V, x\u2032 = f(x) \u2208 V\u2032 is incident to an edge e\u2032 \u2208 E\u2032 if and only if, the corresponding edge, e \u2208 E is incident to x in G. \n</p>\n\n<p>\nAn undirected graph H is called a minor of the graph G if H is isomorphic to a graph that can be obtained by zero or more edge contractions on a subgraph of G. \n</p>\n\n<p>\nA graph is connected if there exists a path between any two vertices. A biconnected graph is one which remains connected even after the removal of any one vertex and all edges incident to it.\n</p>\n\n<p>\nA simple graph is one which does not have more than one edge between any pair of vertex, nor does it have an edge from a vertex to itself.\n</p>\n\n<p>\nYou need to count how many simple biconnected graphs having n vertices and m edges exist such that they do not have a cycle of length 5 as a minor. Two graphs are considered distinct if there exist vertices having labels i and j which are adjacent in the first graph, but not in the second graph.\n</p>\n\n<p>\nInput :\n</p>\n\n<p>\nThe first line contains the number of test cases T. Each of the next lines contains two integers n and m.\n</p>\n\n\n<p>\nOutput :\n</p>\n\n<p>\nOutput T lines, one corresponding to each test case. For a test case, output the number of graphs as described in the question. Output the answer modulo 1000000007.\n</p>\n\n<pre>\nSample Input :\n5\n1 0\n3 2\n3 3\n4 4\n5 10\n\n</pre>\n\n<pre>\nSample Output :\n1\n0\n1\n3\n0\n\n</pre>\n\n<pre>\nConstraints :\n1 &lt;= T &lt;= 2000\n1 &lt;= n &lt;= 100\n0 &lt;= m &lt;= 10000\n</pre>",
    "category_name": "main",
    "date_added": "9-04-2010",
    "status": "success",
    "languages_supported": "C, JAVA, PYTH, CS2, PAS fpc, PAS gpc, RUBY, PHP, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TEXT",
    "max_timelimit": "0.1",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/GRAPHCT",
    "problem_tester": "pieguy",
    "time": {
        "view_start_date": 1275384600,
        "end_date": 1276248600,
        "practice_submission_allowed": true,
        "visible_start_date": 1276248600,
        "submit_start_date": 1275384600,
        "current": 1537439571
    },
    "user": {
        "username": ""
    }
}