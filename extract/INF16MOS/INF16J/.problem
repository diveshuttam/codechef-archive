{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>Robin is a robot builder. His robots are specialized to do only one thing: move from A to B.</p>\n\n<p>Today he's testing out the three new robots he has just built. The testing will happen in an <b>R \u00d7 C</b> rectangular grid. Some of the cells will be empty, and the remaining cells will contain obstacles. A robot can be in any empty cell and can face either north, south, east or west.</p>\n\n<p>Since Robin's robots specialize in movement, there are three kinds of commands that his robots can execute:</p>\n\n<p>\n<ul>\n<li><b>[F]</b>: move forward one cell.</li>\n<li><b>[R]</b>: turn right then move forward one cell.</li>\n<li><b>[L]</b>: turn left then move forward one cell.</li>\n</ul>\n</p>\n\n<p>Note that a robot cannot go to a cell with an obstacle; if it does, it explodes.</p>\n\n<p>Unfortunately, not all robots can execute all the commands above. Here are the names of the three robots, and their capabilities:</p>\n\n<p>\n<ul>\n<li>Bob, which can only use the commands <b>[F]</b>, <b>[R]</b> and <b>[L]</b>.</li>\n<li>Rob, which can only use the commands <b>[F]</b> and <b>[R]</b>.</li>\n<li>Lob, which can only use the commands <b>[F]</b> and <b>[L]</b>.</li>\n</ul>\n</p>\n\n<p>Naturally, this makes some of the cells unreachable from robots, depending on where they start. For example, consider the following layout:</p>\n\n<p>\n<img src=\"https://s3.amazonaws.com/codechef_shared/download/upload/ACM16INF/J1.png\" height=\"160\"/>\n</p>\n<p>Here, the flag represents the starting point of the robots. In this layout, Bob, Rob and Lob can only visit <b>39</b>, <b>37</b> and <b>31</b> distinct cells, respectively:</p>\n<p>\n<img src=\"https://s3.amazonaws.com/codechef_shared/download/upload/ACM16INF/J2.png\" height=\"160\"/>\n</p>\n\n<p>For Robin's test, he needs a layout with the following requirements:</p>\n\n<p>\n<ul>\n<li>The length and width of the grid is between <b>1</b> and <b>20</b> cells, inclusive.</li>\n<li>The boundary cells of the grid must be filled with obstacles. (So that no robot can go off the grid.)</li>\n<li>There exists exactly one starting point.</li>\n<li>The number of distinct cells that Bob can reach from the starting point is <b>B</b>.</li>\n<li>The number of distinct cells that Rob can reach from the starting point is <b>R</b>.</li>\n<li>The number of distinct cells that Lob can reach from the starting point is <b>L</b>.</li>\n</ul>\n</p>\n\n<p>A robot must start at the starting point, but can face any direction at the beginning. Also, the starting point is considered reachable from the starting point.</p>\n\n<p>Unfortunately, Robin found out that it's not so straightforward to find a layout satisfying all the requirements above. Please help Robin solve this problem! (Or, if you're Robin himself, solve this problem!)\n\n<h3>Input</h3>\n<p>The first line of input contains an integer <b>T</b> denoting the number of test cases. The description of <b>T</b> test cases follows.</p>\n<p>Each test case consists of a single line containing three integers <b>B</b>, <b>R</b> and <b>L</b> separated by single spaces.</p>\n\n\n<h3>Output</h3>\n<p>For each test case, first output a single line containing two integers <b>R</b> and <b>C</b>, separated by a single space. Then output <b>R</b> lines, each containing <b>C</b> characters, describing the grid. Each character must either be <tt>.</tt> (an empty cell), <tt>#</tt> (a cell with an obstacle) or <tt>S</tt> (the starting point, which is also an empty cell).</p>\n\n<p>If it's impossible to construct any such grid, just output <tt>-1 -1</tt> in a single line. </p>\n\n\n<h3>Constraints</h3>\n\n<ul>\n<li><b>1 \u2264 T \u2264 30000</b></li>\n<li><b>1 \u2264 B, R, L \u2264 64</b></li>\n</ul>\n\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n<tt>1\n39 37 31\n</tt>\n<b>Output:</b>\n<tt>9 10\n##########\n#........#\n#..#..#..#\n#.#.#.#..#\n#.#...####\n#..##.#..#\n#....S...#\n###...####\n##########</tt>\n</pre>\n\n<h3>Explanation</h3>\n<p>This layout represents the example given in the problem statement.</p>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "28-12-2016",
    "is_direct_submittable": false,
    "contest_name": "ACM-ICPC Asia-India Finals Mirror Contest 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6",
    "todo": false,
    "time": {
        "view_start_date": 1483075800,
        "end_date": 1483093800,
        "practice_submission_allowed": true,
        "visible_start_date": 1794096967,
        "submit_start_date": 1483075800,
        "current": 1537434255
    },
    "problem_author_html_handle": "admin3",
    "problem_name": "Robots of Robin",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/admin3'>admin3</a>",
    "problem_tester_html_handle": "",
    "problem_author": "admin3",
    "contest_code": "INF16MOS",
    "max_timelimit": "2",
    "problem_code": "INF16J"
}