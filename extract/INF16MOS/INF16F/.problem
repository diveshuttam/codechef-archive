{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>Rossiana Gones is on another adventure where he (yes, he) has stumbled upon an ancient cave. There are some ancient gold coins scattered across the cave in some of the cells of the cave. Given the layout of the cave, and Rossiana\u2019s initial cell position, you will have to compute the maximum number of coins he can collect, and minimize the number of moves to do so. That is, the highest priority is to collect the maximum number of coins, and given that, you want to minimize the number of moves.</p>\n<p><b>Description of the cave:</b></p>\n<p><b>Size and dimensions: </b></p>\n<p>The cave is cubical in shape of dimension <b>H * L * W</b>, where <b>H</b> is the height, <b>L</b> is the length and <b>W</b> is the width of the cave.</p>\n<p>Each cell position is denoted by the coordinates <b>(x, y, z)</b>.</p>\n<p>Here,</p>\n<blockquote>\n<p><b>x = 1</b> and <b>x = H</b> represent the lowest and highest level respectively.</p>\n<p><b>y = 1</b> and <b>y = L</b> represent the west-most and east-most cells respectively.</p>\n<p><b>z = 1</b> and <b>z = W</b> represent the south-most and north-most cells respectively.</p>\n</blockquote>\n<p>So, the coordinates of the cell with lowest level in the west-most and south-most position is <b>(1, 1, 1)</b> and the coordinates of the cell with highest level in the east-most and north-most position is <b>(H, L, W).</b></p>\n<p><b>Floors and walls:</b></p>\n<p>Each cell might or might not have a floor and the cells might or might not have walls surrounding it in any of the four directions i.e north, east, south and west.</p>\n<p><b>Ladders:</b></p>\n<p>Some of the walls have extended brick ladders which can be used for climbing.</p>\n<p><b>A sample cave (2-dimensional bisection):</b></p>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F1.png\" width=\"402\" height=\"203\" /></p>\n<p>The thick black lines denote a floor, ceiling or a wall. The dotted lines just show the boundary of each cell, they are not walls. The walls presented in these illustrations are the west/east direction facing walls. <b>Note that even though the illustrations are in 2-D, the real cave is in 3-D.</b></p>\n<p><b>Adjacent cells:</b></p>\n<p>Two cell are adjacent if they share a side.</p>\n<p><b>Gold coins:</b></p>\n<p>There are <b>M</b> ancient gold coins scattered across the cave in some of the cells of the cave. Each cell will contain at most one gold coin.</p>\n<p><b>Description of the moves:</b></p>\n<p>Each possible move is defined as follows:</p>\n<ol\">\n<li><b>Walk between adjacent cells:</b> You can move from one cell to an adjacent cell on the same level via walking, iff both cells have floors and there is no direct wall between them. The following figure shows an example:</li>\n</ol>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F2.png\" alt=\"cave(11).png\" width=\"313\" height=\"181\" /></p>\n<ol>\n<li><b>Climb on a laddered wall in the same cell:</b> While standing on the floor of a cell, you can climb any existing laddered wall facing any direction in the same cell.</li>\n</ol>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F3.png\" alt=\"cave(15).png\" width=\"368\" height=\"198\" /></p>\n<ol>\n<li><b>Climbing down to the ladder on the wall below:</b> While standing on the floor of a cell, you can climb down to a laddered wall on a cell on the lower level which is one unit in front of the current cell in any direction if:</li>\n</ol>\n<ul>\n<li>there is no floor on the cell one unit in front in that direction on the same level as the current one.</li>\n<li>there is no wall between the current cell and the cell one unit in front on the same level.</li>\n<li>the laddered wall on the lower leveled cell is facing the opposite direction.</li>\n</ul>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F4.png\" alt=\"cave(12).png\" width=\"374\" height=\"201\" /></p>\n<p>Remember, you are still on the ladder at the end of this move.</p>\n<ol>\n<li><b>Move to a laddered wall in an adjacent direction within the same cell:</b> While climbing on a laddered wall, you can climb to a laddered wall facing an <b>adjacent direction in the same cell</b>, if it exists. Note that you can\u2019t climb from one laddered wall to another one in the same cell facing the opposite direction in the same move.</li>\n</ol>\n<blockquote>\n<p>This means if you are currently in a laddered wall on the south, you can move to a laddered wall on the west or east in the same cell if they exist but not to the north on the same move.</p>\n</blockquote>\n<ol>\n<li><b>Climb to a laddered wall in an adjacent cell:</b> While climbing on a laddered wall, you can climb to an adjacent laddered wall facing the <b>same direction in an adjacent cell</b> (not necessarily on the same level), iff there is no direct wall or floors between the cells which prevent you from moving. Note that, you are allowed to make sideway movements while on a ladder.</li>\n</ol>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F5.png\" alt=\"cave(13).png\" width=\"378\" height=\"203\" /></p>\n<ol>\n<li><b>Landing on a floor:</b> While climbing on a laddered wall, you can land on the floor of the same cell, if it exists.</li>\n</ol>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F6.png\" alt=\"cave(16).png\" width=\"371\" height=\"199\" /></p>\n<ol>\n<li><p><b>From a ladder, climb to the floor above:</b> While climbing on a laddered wall, you can climb up to the cell on the upper level which is one unit in front, facing the same direction if</p></li>\n</ol>\n<ul>\n<li>A floor exists on that cell.</li>\n<li>There is no floor on the cell directly above the current one, i.e the current cell doesn\u2019t have a roof.</li>\n<li>There is no direct wall between the two upper-level cells.</li>\n</ul>\n<p><img src=\"http://www.codechef.com/download/upload/ACM16INF/F7.png\" alt=\"cave(14).png\" width=\"341\" height=\"184\" /></p>\n<p>A gold coin may only be collected by standing on the floor of that gold coin\u2019s cell. These cells are guaranteed to have floors. Also, the initial cell position will never have a gold coin.</p>\n<p><b>Input</b></p>\n<p>The first line of the input contains a single integer <b>T (1 \u2264 T \u2264 10)</b>, which denotes the number of test cases. This is followed by the test cases.</p>\n<p>The first line of each test case have three space separated integers <b>H</b>, <b>L</b> and <b>W (2 \u2264 H, L, W \u2264 25)</b>.</p>\n<p>The second line contains the coordinates of the initial cell position <b>a</b>, <b>b</b> and <b>c (1 \u2264 a \u2264 H, 1 \u2264 b \u2264 L, 1 \u2264 c \u2264 W)</b>.</p>\n<p>The next <b>H * L * W</b> lines contain the layout of each cell in increasing order of height, length and then width. Each line contains five characters in the format: <b>F N E S W</b>, which represent the floor, the northern wall, the eastern wall, the southern wall and the western wall respectively.</p>\n<p><b>F</b> can be either \u2018<b>#</b>\u2019, \u2018<b>C</b>\u2019 or \u2018<b>.</b>\u2019, which means a floor exists, a floor where a coin exists and a floor doesn\u2019t exist in that cell respectively.</p>\n<p>The walls (<b>N</b>, <b>E</b>, <b>S</b>, <b>W</b>) can be either \u2018<b>#</b>\u2019, \u2018<b>L</b>\u2019 or \u2018<b>.</b>\u2019, which means a regular wall exists, a laddered wall exists and a wall doesn\u2019t exist in the respective direction for that cell respectively.</p>\n<p>It is guaranteed that the number of coins in the entire cave is at most 13 <b>(1 \u2264 M \u2264 13)</b>. Also, if a wall doesn\u2019t exist in a cell in a specific direction, an adjacent wall won\u2019t exist in the adjacent cell either. Also, there won\u2019t be multiple gold coins in a certain cell and the initial cell won\u2019t have a gold coin. The borders facing the four directions of the cave are guaranteed to be walls.</p>\n<p><b>Output</b></p>\n<p>For each test case, output the case number, followed by two space separated integers which represent the maximum number of coins Rossiana can collect and the minimum number of moves he can collect them in respectively.</p>\n\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n<tt>\n2\n2 2 2\n1 1 1\n# . . # #\n# # L . #\n# . # # .\n# # # . #\n# . . # #\n. # . . #\n# . # # .\nC # # . .\n3 3 3\n1 1 1\n# # . # #\nC . . # L\n# # . . #\n# . . # .\n# . # . .\n# # . . .\n# # # # .\nC # # # #\n# # # # .\n# . . # #\n. . . . L\nC # . . L\n. . L # .\n. . L . .\n# # L . .\n# . # # #\n. . # . #\n. # # . #\nC # . # #\n# . . # #\n# # . . #\n. . . # .\n# # . . .\nC # . # .\n# . # # .\n# . # . .\n. # # . .\n</tt>\n<b>Output:</b>\n<tt>\nCase 1: 1 3\nCase 2: 3 17\n</tt>\n</pre>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "27-12-2016",
    "is_direct_submittable": false,
    "contest_name": "ACM-ICPC Asia-India Finals Mirror Contest 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6",
    "todo": false,
    "time": {
        "view_start_date": 1483075800,
        "end_date": 1483093800,
        "practice_submission_allowed": true,
        "visible_start_date": 1794096966,
        "submit_start_date": 1483075800,
        "current": 1537434248
    },
    "problem_author_html_handle": "kol_adm",
    "problem_name": "Lost in the Cave",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/kol_adm'>kol_adm</a>",
    "problem_tester_html_handle": "",
    "problem_author": "kol_adm",
    "contest_code": "INF16MOS",
    "max_timelimit": "5",
    "problem_code": "INF16F"
}