{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<p>Just like the Pinocchio from the childhood classic, our Pinocchio has the worst habit in the world - lying. But instead of a prolonging nose, Pinocchio has a shrinkable memory, such that every time he lies to somebody, his memory reduces to some degree from its present capacity.</p>\n<p>It\u2019s Friday morning and Pinocchio is in his office, analyzing survey responses from the customers. Pinocchio\u2019s team has produced a product which has <strong>1000</strong> features. Each feature has an unique <strong>feature ID</strong> which is an integer in the range of <strong>[1,1000]</strong>. There are <strong>N</strong> survey responses and some of them contain reports of bugs of the features. The collection of the reports is called <strong>broken_features</strong>. Pinocchio is in charge of summarizing the report and sharing it with the team. <strong>broken_features</strong> is a 1-indexed based array and in each index there is a <strong>feature ID</strong> of a broken feature, as reported by the customer. This can also be 0, meaning the corresponding customer could not find any bug in any feature of the product. The goal of the team is to fix every feature that is reported to be broken at least once.</p>\n<p>As Pinocchio started working on it, he just realized that he cannot process so much information altogether now, because his memory has shrunk down to a point when he can only work with a few broken feature reports. As he was wondering what he can do, he met Nadina in the cafe while making tea this afternoon, and Nadina proposed the following solution.</p>\n<p>Nadina advised Pinocchio to come up with a formula using which he can generate some indices, and these indices should capture all the features which are broken. Not only will it decrease the overall size of the summary, but it also can capture all the broken feature IDs at least once. Pinocchio thought this is a brilliant idea as this could help him handle the task with his reduced memory.</p>\n<p>In particular, Nadina told him to find two integers <strong>m</strong> and <strong>r</strong> such that <strong>0 \u2264 r &lt; m</strong>, <strong>m > 1</strong> and </p>\n<p><strong>idx<sub>k</sub> = k*m + r</strong>, where <strong>k = 0,1,2,</strong> \u2026 ---- (1)</p>\n<p>will capture every reported feature <strong>ID</strong>. (Ignore when <strong>idx<sub>k</sub></strong> does not satisfy <b>1 \u2264 idx<sub>k</sub> \u2264 N</b>.) That is, for every reported feature <strong>ID, X</strong>, which appears in the report at least once, there should be some non-negative <strong>k</strong>, such that <strong>broken_features[idx<sub>k</sub>] = X</strong>.</p>\n<p>Pinocchio is only interested in possible values of <strong>(m,r)</strong> where <strong>m > 1</strong> (since he cannot process the entire report in his memory). So for a given <strong>broken_features</strong>, output a valid <strong>(m,r)</strong>. If there are multiple <strong>(m,r)</strong> pairs available, output any. If there is no <strong>(m,r)</strong> pair which meets all the conditions above, output -1.</p>\n\n<p><strong>Input</strong></p>\n<p>Input begins with number of test cases <strong>T</strong> and then <strong>T</strong> cases follow. Each case will have one integer <strong>N (1 \u2264 N \u2264 10000)</strong>, size of <strong>broken_features</strong>, followed by <strong>N</strong> non-negative numbers in the next line separated by spaces. All array elements will be in range <strong>[0,1000]</strong>. The sum of <b>N</b> over all testcases will be less than or equal to <b>25000</b>.</p>\n\n<p><strong>Output</strong></p>\n<p>For each test case, output the case number first, followed by two integers <strong>(m,r)</strong> according to the description above. If there is no valid <strong>(m,r)</strong> pair then output -1.</p>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n<tt>2\n6\n1 0 2 0 3 0\n6\n1 0 2 0 0 3</tt>\n<b>Output:</b>\n<tt>Case 1: 2 1\nCase 2: -1</tt>\n</pre>",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "24-12-2016",
    "is_direct_submittable": false,
    "contest_name": "ACM-ICPC Asia-India Finals Mirror Contest 2016",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6",
    "todo": false,
    "time": {
        "view_start_date": 1483075800,
        "end_date": 1483093800,
        "practice_submission_allowed": true,
        "visible_start_date": 1794096966,
        "submit_start_date": 1483075800,
        "current": 1537434255
    },
    "problem_author_html_handle": "kol_adm",
    "problem_name": "Pinocchio",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/kol_adm'>kol_adm</a>",
    "problem_tester_html_handle": "",
    "problem_author": "kol_adm",
    "contest_code": "INF16MOS",
    "max_timelimit": "2",
    "problem_code": "INF16D"
}