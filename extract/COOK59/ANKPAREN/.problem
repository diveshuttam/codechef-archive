{
    "problem_code": "ANKPAREN",
    "problem_author": "code_master01",
    "contest_name": "June Cook-Off 2015",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>code_master01</span>",
    "problem_name": "Longest non regular parentheses sub-sequence",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>rubanenko</span>",
    "contest_code": "COOK59",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/basic-prog'>basic-prog</a>, <a class='problem-tag-small ' href='/tags/problems/code_master01'>code_master01</a>, <a class='problem-tag-small ' href='/tags/problems/cook59'>cook59</a>, <a class='problem-tag-small ' href='/tags/problems/easy-medium'>easy-medium</a>, <a class='problem-tag-small ' href='/tags/problems/pattern'>pattern</a>, <a class='problem-tag-small ' href='/tags/problems/stack'>stack</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/COOK59/mandarin/ANKPAREN.pdf\">Mandarin Chinese</a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/COOK59/russian/ANKPAREN.pdf\">Russian</a> as well.</h3>\n\n\n<p>Chef has recently learnt about sequences of parentheses. These are special sequences that contain only the characters <em>'('</em> and <em>')'</em>.</p>\n<p>A regular parentheses sequence follows the following definition:  \n</p>\n<ul>\n<li>An empty sequence is regular</li>\n<li>If <strong>S</strong> is a regular sequence, then <strong>(S)</strong> is also regular</li>\n<li>If <strong>A</strong> and <strong>B</strong> represent two regular sequences, then their concatenation <strong>AB</strong> is also regular.</li>\n</ul>\n\n<p>Therefore, the sequences <strong>(), ()()</strong> and <strong>(())()</strong> are regular, while <strong>()(, )</strong> and <strong>))()</strong> are non-regular.</p>\n<p>Now, you need to find the longest subsequence of the given sequence which is non-regular. Amongst all such <strong>distinct</strong> answers, output the lexicographically <strong>K<sup>th</sup></strong> amongst them. If the number of distinct subsequences with maximum length is less than <strong>K</strong>, please output -1 instead.</p>\n<h3>Input:</h3>\n<p>The first line contains a single integer <strong>T</strong>, denoting the number of test cases to follow.<br />\nEach of the test cases have exactly two lines, the first contains the parentheses sequence and the second contains the value of <b>K</b>.</p>\n<h3>Output:</h3>\n<p>Output exactly <strong>T</strong> lines, each containing answer to the corresponding query.</p>\n<h3>Constraints:</h3>\n<ul>\n<li>1 \u2264 <strong>T</strong> \u2264 10</li>\n<li>1 \u2264 |<strong>S</strong>| \u2264 10<sup>5</sup></li>\n<li>1 \u2264 <strong>K</strong> \u2264 10<sup>9</sup></li>\n</ul>\n<h3>Example:</h3>\n<p><strong>Sample Input:</strong></p>\n<pre>\n5\n()\n2\n(()\n1\n(()\n2\n(())\n2\n(())\n3\n\n</pre>\n<p><strong>Sample Output:</strong></p>\n<pre>\n)\n(()\n-1\n())\n-1\n\n</pre>\n<h3>Explanation:</h3>\n<p><strong>Case 1:</strong>\nFollowing are the subsequences:  \n</p>\n<pre>\nLength   Subsequence   Regular/Non-Regular\n\n  1\t\t\t(\t\t\tNon-regular\n  1\t\t\t)\t\t\tNon-regular\n  2\t\t\t()\t\t\tRegular\n\n</pre>\n<p>There are two non-regular subsequences of equal length:'(' and ')'.<br />\nWe are asked for the lexicographically 2nd, so output should be ')'.</p>\n<p><strong>Case 2:</strong>\nFollowing are the subsequences:  \n</p>\n<pre>\nLength   Subsequence   Regular/Non-Regular\n  1\t\t\t(\t\t\tNon-Regular\n  1\t\t\t)\t\t\tNon-Regular\n  2\t\t\t((\t\t\tNon-Regular\n  2\t\t\t()\t\t\tRegular\n  3\t\t\t(()\t\t\tNon-Regular\n\n</pre>\n<p>In this case, there are non-regular subsequences of lengths 1, 2, and 3. But, as 3 is the maximum among these, we choose, <strong>(()</strong>.</p>\n<p><strong>Case 3:</strong><br />\nThe string is same as Case 2, and we realize that there is only one subsequence of the maximum length 3, thus we must output -1.</p>\n<p><strong>Case 4:</strong><br />\nWe can find that following subsequences have maximum length and are non-regular.</p>\n<pre>\nLength \tSubsequence\n  3\t\t\t())\t\n  3\t\t\t(()\n\n</pre>\n<p>In lexicographical order, we have following subsequences: [ ((), ()) ]<br />\nThe query asks for 2nd subsequence, thus the required output is ()).</p>\n<p><strong>Case 5:</strong><br />\nThis is the same sequence as last case, and we know that there are exactly 2 distinct subsequences of maximum length. Thus, answer should be -1.</p>\n<h3>Notes:</h3>\n<ul>\n<li>A subsequence of a given sequence <strong>A</strong> is a non-empty sequence obtained by removing zero or more characters from <strong>A</strong>. It does not need to be contiguous.</li>\n<li>A sequence <strong>A</strong> is called different from another sequence <strong>B</strong>, if there exists an integer <strong>k</strong>, such that 1 \u2264 <strong>k</strong> \u2264 <strong>N</strong> (<strong>N </strong> is the length of both sequences), and <strong>A<sub>k</sub> != B<sub>k</sub>.</strong></li>\n<li>Consider two different <b>N</b>-length sequences, <b>A</b> and <b>B</b>. Let <b>k</b> be the smallest integer such that <strong>A[k] != B[k]</strong> and 1 \u2264 <b>k</b> \u2264 <b>N</b>. If <b>A[k] < B[k]</b>, then <b>A</b> is said to be lexicographically smaller than <b>B</b>, and vice-versa.</li>\n</ul>",
    "category_name": "main",
    "date_added": "9-06-2015",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "max_timelimit": "1",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/ANKPAREN",
    "problem_tester": "rubanenko",
    "time": {
        "view_start_date": 1434902400,
        "end_date": 1434911400,
        "practice_submission_allowed": true,
        "visible_start_date": 1434911400,
        "submit_start_date": 1434902400,
        "current": 1537436237
    },
    "user": {
        "username": ""
    }
}