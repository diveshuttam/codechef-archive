{
    "problem_code": "SEAPROAR",
    "problem_author": "sereja",
    "contest_name": "March Challenge 2015",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>sereja</span>",
    "problem_name": "Sereja and Random Array",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>laycurse</span>",
    "contest_code": "MARCH15",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/bitwise-operatn'>bitwise-operatn</a>, <a class='problem-tag-small ' href='/tags/problems/march15'>march15</a>, <a class='problem-tag-small ' href='/tags/problems/medium'>medium</a>, <a class='problem-tag-small ' href='/tags/problems/seapror'>seapror</a>, <a class='problem-tag-small ' href='/tags/problems/sereja'>sereja</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><h3> Read problems statements in <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/MARCH15/mandarin/SEAPROAR.pdf\">Mandarin Chinese </a> and <a target=\"_blank\" href=\"http://www.codechef.com/download/translated/MARCH15/russian/SEAPROAR.pdf\">Russian</a>.</h3>\n<p>Sereja likes to generate pseudo random binary sequences. Now Sereja has two generators: one is a based on <a href=\"http://en.wikipedia.org/wiki/Linear_congruential_generator\">linear congruential generators (LCGs)</a> and another is based on <a href=\"http://en.wikipedia.org/wiki/Xorshift\">Xorshift</a>.</p>\n<p>Sereja has some binary sequences generated in past times, and he wants to know which generator makes these sequences. You can know the details of Sereja's generators, then can you answer this problem?</p>\n<p>The following is the details. We may give the length <b>N</b> and a seed integer <b>S</b> to the generators, then they generate a binary sequence <b>A[1], A[2], ..., A[N]</b>.</p>\n<p>The 1st generator works as follows (C++ code. If you are not familiar with C++, please see the below section <b>Notes for C++</b>):</p>\n<pre>\n/* ------------------ start here ---------------------*/\nunsigned X; // we assume that unsigned is a 32bit integer type\n\nvoid srand1(unsigned S){\n  X = S;\n}\n\nunsigned nextInteger1(void){\n  X = X * 1103515245 + 12345;\n  return (X / 65536) % 32768;\n}\n\nvoid generator1(int N, unsigned S, int A[]){\n  srand1(S);\n  for(int i=1;i&lt;=N;i++){\n    A[i] = nextInteger1() % 2; \n  }\n}\n/* ------------------ end here -----------------------*/\n\n</pre><p>\nThe 2nd generator works as follows (C++ code):\n</p>\n<pre>\n/* ------------------ start here ---------------------*/\nunsigned x, y, z, w; // we assume that unsigned is a 32bit integer type\n\nvoid srand2(unsigned S){\n  x = S;\n  y = x * S;\n  z = y * S;\n  w = z * S;\n}\n\nunsigned nextInteger2(void){\n  unsigned t = x ^ (x &lt;&lt; 11);\n  x = y; y = z; z = w;\n  return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)); \n}\n\nvoid generator2(int N, unsigned S, int A[]){\n  srand2(S);\n  for(int i=1;i&lt;=N;i++){\n    A[i] = nextInteger2() % 2; \n  }\n}\n/* ------------------ end here -----------------------*/\n\n</pre><p>Note that the LCG used in the 1st generator is the same one suggested in <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">ISO/IEC 9899 (pp. 346--347)</a>, and Xorshift used in the 2nd generator is the same one in <a href=\"http://www.jstatsoft.org/v08/i14/paper\">the paper by Marsaglia (July 2003)</a>.</p>\n<h3>Input</h3>\n<p>The first line of input contains an integer <b>T</b>, denoting the number of test cases. Then <b>T</b> test cases follow.</p>\n<p>Each test case has only one line. The line contains the string of length <b>N</b>, denoting the array <b>A[1], A[2], ..., A[N]</b>, where the string consists of only characters '<b>0</b>' and '<b>1</b>', and the <b>i</b><sup>th</sup> character denotes <b>A[i]</b>.</p>\n<p>Note that the integer <b>N</b> is not given in the input explicitly.</p>\n<h3>Output</h3>\n<p>For each test case, print \"LCG\" if the given sequence generated by the 1st generator, or print \"Xorshift\" if the given sequence is generated by the 2nd generator.</p>\n<h3>Constraints and Subtasks</h3>\n<ul>\n<li><b>1 \u2264 T \u2264 30</b></li>\n<li>There is no pair of integers <b>(s, t)</b> such that <b>0 \u2264 s, t \u2264 10<sup>9</sup></b> and both <b>generator1(N, s, A)</b> and <b>generator2(N, t, A)</b> generate the given sequence. (Thus the answer will be determined uniquely)</li>\n</ul>\n<p></p>\n<p>\n<b>Subtask 1 (10 points)</b>\n</p>\n<ul>\n<li><b>50 \u2264 N \u2264 500</b></li>\n<li>There is an integer <b>0 \u2264 s \u2264 500</b> such that <b>generator1(N, s, A)</b> or <b>generator2(N, s, A)</b> generates the given sequence.</li>\n</ul>\n<p></p>\n<p>\n<b>Subtask 2 (40 points)</b>\n</p>\n<ul>\n<li><b>500 \u2264 N \u2264 100000</b></li>\n<li>There is an integer <b>0 \u2264 s \u2264 31313</b> such that <b>generator1(N, s, A)</b> or <b>generator2(N, s, A)</b> generates the given sequence.</li>\n</ul>\n<p></p>\n<p>\n<b>Subtask 3 (20 points)</b>\n</p>\n<ul>\n<li><b>100000 \u2264 N \u2264 200000</b></li>\n<li>There is an integer <b>0 \u2264 s \u2264 10<sup>9</sup></b> such that <b>generator1(N, s, A)</b> or <b>generator2(N, s, A)</b> generates the given sequence.</li>\n</ul>\n<p></p>\n<p>\n<b>Subtask 4 (30 points)</b>\n</p>\n<ul>\n<li><b>500 \u2264 N \u2264 200000</b></li>\n<li>There is an integer <b>0 \u2264 s \u2264 10<sup>9</sup></b> such that <b>generator1(N, s, A)</b> or <b>generator2(N, s, A)</b> generates the given sequence.</li>\n</ul>\n<h3>Example</h3>\n<pre>\n<b>Input:</b>\n6\n1101100100101111010011010101110100001000000101001110101011010101010\n000101101110101101110110010111000000011001101110101\n11010100010110001101010110111000010001110010010011011110010010110000001100110\n01011010100111100111101001010010100100111000111110\n0000000000000000000000001001001010101011001111101101010\n11101001010000000111101001111111000010000111010011111000001111\n\n<b>Output:</b>\nLCG\nLCG\nLCG\nXorshift\nXorshift\nXorshift\n</pre><h3>Explanation</h3>\n<p><b>Example 1.</b> <b>generator1(67, 5, A)</b> generates the given sequence.</p>\n<p><b>Example 2.</b> <b>generator1(51, 8, A)</b> generates the given sequence.</p>\n<p><b>Example 3.</b> <b>generator1(77, 58, A)</b> generates the given sequence.</p>\n<p><b>Example 4.</b> <b>generator2(50, 5, A)</b> generates the given sequence.</p>\n<p><b>Example 5.</b> <b>generator2(55, 8, A)</b> generates the given sequence.</p>\n<p><b>Example 6.</b> <b>generator2(62, 58, A)</b> generates the given sequence.</p>\n<h3>Notes for C++</h3>\n<p>\nAt first, in the codes, almost every operation will be done with unsigned.<br />\nThus operations will return the result modulo <b>2<sup>32</sup></b>.<br />\nFor example,\n</p>\n<pre>\n    X * 1103515245 + 12345\n\n</pre><p>means that</p>\n<div style=\"margin-left: 3em;\"><b>(X \u00d7 1103515245 + 12345) mod 2<sup>32</sup></b>,</div>\n<p><br />\nand\n</p>\n<pre>\n    (X / 65536) % 32768\n</pre><p>\nmeans that</p>\n<div style=\"margin-left: 3em;\"><b>(floor(X / 65536) mod 32768) mod 2<sup>32</sup></b>,</div>\n<p><br />\nin terms of mathematical notations.\n</p>\n<p>\nThen there are some bit operations in the 2nd generator.<br />\nThe operators <b>&lt;&lt;</b> and <b>>></b> denote bit shifts.<br />\nFor example,\n</p>\n<pre>\n    X &lt;&lt; 15\n</pre><p>\nmeans that</p>\n<div style=\"margin-left: 3em;\"><b>(X \u00d7 2<sup>15</sup>) mod 2<sup>32</sup></b>,</div>\n<p><br />\nand\n</p>\n<pre>\n    X >> 13\n</pre><p>\nmeans that</p>\n<div style=\"margin-left: 3em;\"><b>floor(X / 2<sup>13</sup>)</b>.</div>\n<p><br />\nAnd the operator <b>^</b> denotes <a href=\"http://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise XOR</a>.\n</p>\n",
    "category_name": "main",
    "date_added": "29-11-2014",
    "status": "success",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, ERL, TCL, PERL6, TEXT, CLOJ, FS",
    "max_timelimit": "1",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/SEAPROAR",
    "problem_tester": "laycurse",
    "time": {
        "view_start_date": 1425634200,
        "end_date": 1426498200,
        "practice_submission_allowed": true,
        "visible_start_date": 1426498200,
        "submit_start_date": 1425634200,
        "current": 1537436546
    },
    "user": {
        "username": ""
    }
}