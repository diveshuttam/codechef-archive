{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\nOLA Cabs (a taxi Service) has just started their business in Berland. The two major problems they are facing are listed below:-\n<ul>\n<li><b>Problem #1:</b> The taxi drivers they have recruited are quite lazy. As they do not start their work (i.e., they will not be active) until a specific time, but once started they continue their work till the end of the day. Taxi driver will update their start time of their work to the Manager of OLA (i.e., Me) each day.<br>\n<b>1 X</b>: Represents that a taxi driver at building <b>X</b> is active now. </li>\n\n<li><b>Problem #2:</b> Whenever a passenger at any building requests for a taxi, we need to compute which taxi is closest to the calling passenger and what is its shortest distance between these building.<br>\n<b>2 Y</b>: Represents that a passenger at building <b>Y</b> has requested for a taxi, and we need to compute which taxi is closest to the calling passenger and print the shortest distance between these building.</li>\n</ul>\n</p>\n\n<b>Berland city is described below:</b><br>\nBerland is a well developed small city consisting of <b>N</b> tall buildings which are connected by <b>N-1</b> bi-directional roads. At each building there is only one taxi driver of OLA. On each day taxi driver at building <b>1</b> will be active first.<br>\n\nI need your help in solving the above two problems for a specific day(As I am the manager of this unit of OLA). (For better clarity view the test cases explanation). \n<br>\n<b>Note:</b> After dropping the passenger to its stop, taxi driver goes to its initial position (the building it started with).\n\n<h3>Input</h3>\n\n<ul>\n<li>First line contains two space separated integers <b>N</b> and <b>Q</b> denoting the number of buildings in Berland and the number of queries respectively. Each query will either belong to Problem #1, or Problem #2.</li>\n<li>Next <b>N-1</b> lines contains three space separated integers <b>U</b>, <b>V</b>, and <b>W</b>, representing that their is a bi-directional road from <b>U</b> to <b>V</b> with a distance of <b>W</b>.</li>\n<li>Next <b>Q</b> lines contains queries (format is shown in the problem statement).\n</ul>\n\n\n<h3>Output</h3>\n<ul>\n<li>For each query of Problem #2 type, print the minimum distance that required.</li> \n</ul>\n\n\n<h3>Constraints and Sub-tasks</h3>\n<ul>\n<li><b>2</b> <= <b>N</b> <= <b>100000</b></li>\n<li><b>1</b> <= <b>Q</b> <= <b>100000</b></li>\n<li><b>1</b> <= <b>U, V, Y</b> <= <b>N</b></li>\n<li><b>2</b> <= <b>X</b> <= <b>N</b></li>\n<li><b>1</b> <= <b>W</b> <= <b>100 (in km)</b></li>\n</ul>\n\n<b>Subtask 1: 5 points</b>\n<ul>\n<li><b>2</b> <= <b>N</b> <= <b>10</b></li>\n<li><b>1</b> <= <b>Q</b> <= <b>50</b></li>\n</ul>\n\n<b>Subtask 2: 10 points</b>\n<ul>\n<li><b>2</b> <= <b>N</b> <= <b>1000</b></li>\n<li><b>1</b> <= <b>Q</b> <= <b>100000</b></li>\n</ul>\n\n<b>Subtask 3: 15 points</b>\n<ul>\n<li><b>2</b> <= <b>N</b> <= <b>10000</b></li>\n<li><b>1</b> <= <b>Q</b> <= <b>100000</b></li>\n</ul>\n\n<b>Subtask 3: 70 points</b>\n<ul>\n<li>original constraints.</li>\n</ul>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n7 4\n1 2 2\n2 3 3\n2 4 1\n4 5 2\n1 6 1\n6 7 2\n2 1\n2 7\n1 6\n2 7\n\n<b>Output:</b>\n0\n3\n2\n\n<b>Explanation:</b>\nInitial state of Berland City is shown below:\n<img src=\"https://s3.amazonaws.com/hr-assets/0/1485950558-c94525b701-Screenshot9.png\" title=\"first.png\" />\n\n<b>Queries</b>\n<b>Case #1: </b>As building 1 contains an active taxi and the passenger at building 1 has requested for a taxi, the minimum cost will be 0.\n\n<b>Case #2: </b>As building 1 contains an active taxi and the passenger at building 7 has requested for a taxi, the minimum cost will be 2 + 1 = 3.\n\n<b>Case #3: </b>Building 6 taxi is on. State is shown below.\n<img src=\"https://s3.amazonaws.com/hr-assets/0/1485950915-cdd3487de3-Screenshot10.png\"  title=\"second.png\" />\n\n<b> Case #4: </b>Nearest taxi is at building 6. Hence the minimum distance is 2.\n</pre>\n\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "31-01-2017",
    "is_direct_submittable": false,
    "contest_name": "Codevaitam 3.0",
    "languages_supported": "C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, SCALA, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, PERL6, TEXT, SCM chicken, CLOJ, FS",
    "todo": false,
    "time": {
        "view_start_date": 1485959400,
        "end_date": 1486305000,
        "practice_submission_allowed": true,
        "visible_start_date": 1486305000,
        "submit_start_date": 1485959400,
        "current": 1537434172
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #684273;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>4&#9733;</span><span>decoder_pheku</span>",
    "problem_name": "Theater shade in Berland 2",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/decoder_pheku'>decoder_pheku</a>",
    "problem_tester_html_handle": "",
    "problem_author": "decoder_pheku",
    "contest_code": "CDVA17",
    "max_timelimit": "1",
    "problem_code": "CDVA1710"
}