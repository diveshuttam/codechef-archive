{
    "problem_code": "QUERY",
    "problem_author": "xcwgf666",
    "contest_name": "February 2013 Challenge",
    "todo": false,
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>xcwgf666</span>",
    "problem_name": "Observing the Tree",
    "source_sizelimit": "50000",
    "problem_tester_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;</span><span>laycurse</span>",
    "contest_code": "FEB13",
    "is_direct_submittable": false,
    "tags": "<a class='problem-tag-small ' href='/tags/problems/feb13'>feb13</a>, <a class='problem-tag-small ' href='/tags/problems/hard'>hard</a>, <a class='problem-tag-small ' href='/tags/problems/heavy-light'>heavy-light</a>, <a class='problem-tag-small ' href='/tags/problems/persistence'>persistence</a>, <a class='problem-tag-small ' href='/tags/problems/xcwgf666'>xcwgf666</a>",
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>Chef gives you a tree, consisting of <b>N</b> nodes. The nodes are numbered from <b>1</b> to <b>N</b>, and each node has an integer, which is equal to <b>0</b> initially. Then, Chef asks you to perform <b>M</b> queries.</p>\n<p>The first type of queries is <i>changing</i>: here, you are given integers <b>X</b>, <b>Y</b>, <b>A</b> and <b>B</b>. Add <b>A</b> to the integer, associated with the node <b>X</b>, then add <b>A+B</b> to the integer, associated with the second node on the way from <b>X</b> to <b>Y</b>, then add <b>A+2*B</b> to the integer, associated with the third node on the way from <b>X</b> to <b>Y</b>, and so on. As you know, there is only one simple path from <b>X</b> to <b>Y</b>.</p>\n<p>The second type of queries is a <i>question</i>: here, you are given integers <b>X</b> and <b>Y</b>. Output the sum of all integers, associated with nodes on the way from <b>X</b> to <b>Y</b>.</p>\n<p>The third type of queries is a <i>rollback</i>: here, you are given an integer <b>X</b>. All the integers associated with the nodes return to the state after the <b>X</b>-th changing query. If <b>X</b> is <b>0</b>, then all of them become equal to zero, as in the very beginning.</p>\n<h3>Input</h3>\n<p>The first line of an input consists of two integers - <b>N</b> and <b>M</b>.</p>\n<p>Then, <b>N\u22121</b> lines follow. These <b>N\u22121</b> lines describe the tree structure. Each line consists of two integers - <b>X</b> and <b>Y</b>, and that means that there is an edge between node <b>X</b> and node <b>Y</b>.</p>\n<p>Then, <b>M</b> lines follow. A single line denotes a single query, which has one of the following forms: (See the sample for the detailed explanation)</p>\n<ul>\n<li>c <b>X<sub>1</sub></b> <b>Y<sub>1</sub></b> <b>A</b> <b>B</b> - <i>changing</i> query,</li>\n<li>q <b>X<sub>1</sub></b> <b>Y<sub>1</sub></b> - <i>question</i> query,</li>\n<li>l <b>X<sub>1</sub></b> - <i>rollback</i> query. </li>\n</ul>\n<p>As you can see, the numbers <b>X</b> and <b>Y</b> aren't given to you directly. For the <i>rollback</i> query, actual number <b>X</b> will be equal to <b>(X<sub>1</sub>+lastans) modulo (total number of <i>changing</i> queries before this query + 1)</b>. For the <i>changing</i> and <i>question</i> queries, <b>X</b> will be equal to <b>((X<sub>1</sub>+lastans) modulo N)+1</b> and <b>Y</b> will be equal to <b>((Y<sub>1</sub>+lastans) modulo N)+1</b>, where <b>lastans</b> denotes the last number that you have output, or zero if you haven't output any numbers yet.</p>\n<h3>Output</h3>\n<p>For each <i>question</i> query output the answer on a single line.</p>\n<h3>Constraints</h3>\n<ul>\n<li>1 \u2264 <b>N</b>, <b>M</b> \u2264 100000 (10<sup>5</sup>)</li>\n<li>0 \u2264 <b>A</b>, <b>B</b> \u2264 1000</li>\n<li>0 \u2264 <b>X<sub>1</sub></b>, <b>Y<sub>1</sub></b> \u2264 100000 (10<sup>5</sup>)</li>\n</ul>\n<h3>Example</h3>\n<pre>\n<b>Input:</b>\n5 7\n1 2\n2 3\n3 4\n4 5\nc 1 4 2 3\nc 2 3 5 10\nq 1 3\nl 1\nq 1 3\nl 1\nq 1 3\n\n<b>Output:</b>\n35\n0\n15\n</pre><h3>Explanation</h3>\n<p>As you can see, the tree in the sample is like a line. Let's denote the first state of integers <b>0 0 0 0 0</b>, where the <b>i</b>-th integer means the integer associated with the node <b>i</b>.</p>\n<p>In the first <i>changing</i> query <b>\"c 1 4 2 3\"</b>, the actual numbers are <b>X = (1 + 0) modulo 5 + 1 = 2, Y = (4 + 0) modulo 5 + 1 = 5</b>. Hence the state will be <b>0 2 5 8 11</b> after this query.</p>\n<p>After the second <i>changing</i> query <b>\"c 2 3 5 10\"</b>, the state will be <b>0 2 10 23 11</b> for similar reason.</p>\n<p>In the next <i>question</i> query, the actual numbers are <b>X = (1 + 0) modulo 5 + 1 = 2, Y = (3 + 0) modulo 5 + 1 = 4</b>. Hence the answer must be <b>2 + 10 + 23 = 35</b>.</p>\n<p>In the first rollback query <b>\"l 1\"</b>, the actual number is <b>X = (1 + 35) modulo (2 + 1) = 36 modulo 3 = 0</b>, since <b>lastans = 36</b>. Thus the state will be rollbacked to <b>0 0 0 0 0</b>.</p>\n<p>Then the answer of the next <i>question</i> query <b>\"q 1 3\"</b> must be 0, because all integers are currently 0.</p>\n<p>In the second rollback query <b>\"l 1\"</b>, the actual number is <b>X = (1 + 0) modulo (2 + 1) = 1</b>, since <b>lastans = 0</b>. Thus the state will be <b>0 2 5 8 11</b>, which is the state after the first <i>changing</i> query.</p>\n<p>Then the answer of the last <i>question</i> query must be <b>2 + 5 + 8 = 15</b>.</p>\n",
    "category_name": "main",
    "date_added": "26-12-2012",
    "status": "success",
    "languages_supported": "C, JAVA, CS2, PAS fpc, PAS gpc, GO, NODEJS, HASK, D, PERL, FORT, ADA, CAML, ICK, BF, ASM, CLPS, ICON, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, JS, ERL, CLOJ, FS",
    "max_timelimit": "5",
    "problem_status": "unattempted",
    "editorial_url": "http://discuss.codechef.com/problems/QUERY",
    "problem_tester": "laycurse",
    "time": {
        "view_start_date": 1359711000,
        "end_date": 1360575000,
        "practice_submission_allowed": true,
        "visible_start_date": 1360575000,
        "submit_start_date": 1359711000,
        "current": 1537438539
    },
    "user": {
        "username": ""
    }
}