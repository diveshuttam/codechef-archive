{
    "status": "success",
    "problem_status": "unattempted",
    "problem_tester": null,
    "body": "<span class=\"solution-visible-txt\">All submissions for this problem are available.</span><p>\nThere is an unrooted tree, <b>T</b>, with <b>L</b> leaves and <b>N</b> nodes. \n(Leaves are nodes with degree = 1.) </p>\n<p>\nFor every node <b>u</b>, we define its <b>rootScore</b>.\nTo calculate <b>rootScore(u)</b>, first root the tree at <b>u</b> (which might be a leaf node). \n</p><p>\nWe also define a coloring procedure for any rooted tree. First remove any existing color from all the nodes. Then select some nodes and apply the <b>colorSubtree</b> function on them. \nWhen <b>colorSubtree</b> is called on any node<b> u</b>, it colors the entire subtree of <b>u</b>, including <b>u</b>. </p>\n<p>\nYou need to color <b>\"exactly\" floor(L / 2)</b> of the leaves.\nSo, for any root node <b>u</b>, you will get a set of nodes, <b>S</b>, such that applying <b>colorSubtree</b> on each of its elements will result in exactly <b>floor(L / 2)</b> the leaves to be colored. </p><p>\nNote that such a set always exist because one can always choose any of <b>floor(L / 2)</b> leaves that are not root and put them in <b>S</b>. </p>\n<p>\n<b>rootScore(u)</b> is the minimum cardinality for such a set if <b>u</b> is the root of the tree.\nWhat is the minimum <b>rootScore</b> across all the nodes in <b>T</b>? \n</p>\n\n\n<h3>Input</h3>\n<ul>\n<li>First line contains <b>N</b>, the number of nodes in tree <b>T</b>.\n<li>The next <b>N-1</b> lines contain <b>2</b> space separated integers, <b>u</b> and <b>v</b>, each denoting that there is an edge between vertex <b>u</b> and vertex <b>v</b>.</ul>\n\n<h3>Output</h3>\nOutput a single integer, the answer to the problem.\n\n<h3>Constraints</h3>\n<ul>\n<li><b>1 \u2264 N \u2264 3000</b>\n<li><b> 1 \u2264 u, v \u2264 N </b>\n</ul>\n\n<h3>Example</h3>\n<pre><b>Input:</b>\n3\n2 1\n1 3\n\n<b>Output:</b>\n1\n</pre>\n",
    "category_name": "main",
    "user": {
        "username": ""
    },
    "date_added": "28-01-2016",
    "is_direct_submittable": false,
    "contest_name": "ICPC Preparatory Series by Team Horcruxes",
    "languages_supported": "C, CPP14, JAVA",
    "todo": false,
    "time": {
        "view_start_date": 1454513400,
        "end_date": 1454531400,
        "practice_submission_allowed": true,
        "visible_start_date": 1454531400,
        "submit_start_date": 1454513400,
        "current": 1537435554
    },
    "problem_author_html_handle": "<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FFBF00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>5&#9733;</span><span>sandyeep</span>",
    "problem_name": "Node Picking",
    "source_sizelimit": "50000",
    "tags": "<a class='problem-tag-small ' href='/tags/problems/sandyeep'>sandyeep</a>",
    "problem_tester_html_handle": "",
    "problem_author": "sandyeep",
    "contest_code": "IPC15P2B",
    "max_timelimit": "2",
    "problem_code": "NOPI"
}